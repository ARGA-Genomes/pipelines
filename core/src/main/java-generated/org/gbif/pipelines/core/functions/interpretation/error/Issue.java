/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gbif.pipelines.core.functions.interpretation.error;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Issue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Issue\",\"namespace\":\"org.gbif.pipelines.core.functions.interpretation.error\",\"fields\":[{\"name\":\"remark\",\"type\":\"string\"},{\"name\":\"issueType\",\"type\":{\"type\":\"enum\",\"name\":\"IssueType\",\"symbols\":[\"OTHERS\",\"PARSE_ERROR\",\"DAY_OUT_OF_RANGE\",\"MONTH_OUT_OF_RANGE\",\"INVALID_YEAR\",\"COUNTRY_AND_COUNTRYCODE_DONOT_MATCH\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence remark;
  @Deprecated public org.gbif.pipelines.core.functions.interpretation.error.IssueType issueType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Issue() {}

  /**
   * All-args constructor.
   */
  public Issue(java.lang.CharSequence remark, org.gbif.pipelines.core.functions.interpretation.error.IssueType issueType) {
    this.remark = remark;
    this.issueType = issueType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return remark;
    case 1: return issueType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: remark = (java.lang.CharSequence)value$; break;
    case 1: issueType = (org.gbif.pipelines.core.functions.interpretation.error.IssueType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'remark' field.
   */
  public java.lang.CharSequence getRemark() {
    return remark;
  }

  /**
   * Sets the value of the 'remark' field.
   * @param value the value to set.
   */
  public void setRemark(java.lang.CharSequence value) {
    this.remark = value;
  }

  /**
   * Gets the value of the 'issueType' field.
   */
  public org.gbif.pipelines.core.functions.interpretation.error.IssueType getIssueType() {
    return issueType;
  }

  /**
   * Sets the value of the 'issueType' field.
   * @param value the value to set.
   */
  public void setIssueType(org.gbif.pipelines.core.functions.interpretation.error.IssueType value) {
    this.issueType = value;
  }

  /** Creates a new Issue RecordBuilder */
  public static org.gbif.pipelines.core.functions.interpretation.error.Issue.Builder newBuilder() {
    return new org.gbif.pipelines.core.functions.interpretation.error.Issue.Builder();
  }
  
  /** Creates a new Issue RecordBuilder by copying an existing Builder */
  public static org.gbif.pipelines.core.functions.interpretation.error.Issue.Builder newBuilder(org.gbif.pipelines.core.functions.interpretation.error.Issue.Builder other) {
    return new org.gbif.pipelines.core.functions.interpretation.error.Issue.Builder(other);
  }
  
  /** Creates a new Issue RecordBuilder by copying an existing Issue instance */
  public static org.gbif.pipelines.core.functions.interpretation.error.Issue.Builder newBuilder(org.gbif.pipelines.core.functions.interpretation.error.Issue other) {
    return new org.gbif.pipelines.core.functions.interpretation.error.Issue.Builder(other);
  }
  
  /**
   * RecordBuilder for Issue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Issue>
    implements org.apache.avro.data.RecordBuilder<Issue> {

    private java.lang.CharSequence remark;
    private org.gbif.pipelines.core.functions.interpretation.error.IssueType issueType;

    /** Creates a new Builder */
    private Builder() {
      super(org.gbif.pipelines.core.functions.interpretation.error.Issue.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gbif.pipelines.core.functions.interpretation.error.Issue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.remark)) {
        this.remark = data().deepCopy(fields()[0].schema(), other.remark);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.issueType)) {
        this.issueType = data().deepCopy(fields()[1].schema(), other.issueType);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Issue instance */
    private Builder(org.gbif.pipelines.core.functions.interpretation.error.Issue other) {
            super(org.gbif.pipelines.core.functions.interpretation.error.Issue.SCHEMA$);
      if (isValidValue(fields()[0], other.remark)) {
        this.remark = data().deepCopy(fields()[0].schema(), other.remark);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.issueType)) {
        this.issueType = data().deepCopy(fields()[1].schema(), other.issueType);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'remark' field */
    public java.lang.CharSequence getRemark() {
      return remark;
    }
    
    /** Sets the value of the 'remark' field */
    public org.gbif.pipelines.core.functions.interpretation.error.Issue.Builder setRemark(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.remark = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'remark' field has been set */
    public boolean hasRemark() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'remark' field */
    public org.gbif.pipelines.core.functions.interpretation.error.Issue.Builder clearRemark() {
      remark = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'issueType' field */
    public org.gbif.pipelines.core.functions.interpretation.error.IssueType getIssueType() {
      return issueType;
    }
    
    /** Sets the value of the 'issueType' field */
    public org.gbif.pipelines.core.functions.interpretation.error.Issue.Builder setIssueType(org.gbif.pipelines.core.functions.interpretation.error.IssueType value) {
      validate(fields()[1], value);
      this.issueType = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'issueType' field has been set */
    public boolean hasIssueType() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'issueType' field */
    public org.gbif.pipelines.core.functions.interpretation.error.Issue.Builder clearIssueType() {
      issueType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Issue build() {
      try {
        Issue record = new Issue();
        record.remark = fieldSetFlags()[0] ? this.remark : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.issueType = fieldSetFlags()[1] ? this.issueType : (org.gbif.pipelines.core.functions.interpretation.error.IssueType) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
