/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gbif.pipelines.core.functions.interpretation.error;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class IssueLineageRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"IssueLineageRecord\",\"namespace\":\"org.gbif.pipelines.core.functions.interpretation.error\",\"fields\":[{\"name\":\"occurenceId\",\"type\":\"string\"},{\"name\":\"fieldIssuesMap\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Issue\",\"fields\":[{\"name\":\"remark\",\"type\":\"string\"},{\"name\":\"issueType\",\"type\":{\"type\":\"enum\",\"name\":\"IssueType\",\"symbols\":[\"OTHERS\",\"PARSE_ERROR\",\"DAY_OUT_OF_RANGE\",\"MONTH_OUT_OF_RANGE\",\"INVALID_YEAR\",\"COUNTRY_AND_COUNTRYCODE_DONOT_MATCH\"]}}]}}}},{\"name\":\"fieldLineageMap\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Lineage\",\"fields\":[{\"name\":\"remark\",\"type\":\"string\"},{\"name\":\"lineageType\",\"type\":{\"type\":\"enum\",\"name\":\"LineageType\",\"symbols\":[\"OTHERS\",\"SET_TO_NULL\",\"SET_COUNTRYCODE_FROM_COUNTRY\"]}}]}}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence occurenceId;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Issue>> fieldIssuesMap;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Lineage>> fieldLineageMap;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public IssueLineageRecord() {}

  /**
   * All-args constructor.
   */
  public IssueLineageRecord(java.lang.CharSequence occurenceId, java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Issue>> fieldIssuesMap, java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Lineage>> fieldLineageMap) {
    this.occurenceId = occurenceId;
    this.fieldIssuesMap = fieldIssuesMap;
    this.fieldLineageMap = fieldLineageMap;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return occurenceId;
    case 1: return fieldIssuesMap;
    case 2: return fieldLineageMap;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: occurenceId = (java.lang.CharSequence)value$; break;
    case 1: fieldIssuesMap = (java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Issue>>)value$; break;
    case 2: fieldLineageMap = (java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Lineage>>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'occurenceId' field.
   */
  public java.lang.CharSequence getOccurenceId() {
    return occurenceId;
  }

  /**
   * Sets the value of the 'occurenceId' field.
   * @param value the value to set.
   */
  public void setOccurenceId(java.lang.CharSequence value) {
    this.occurenceId = value;
  }

  /**
   * Gets the value of the 'fieldIssuesMap' field.
   */
  public java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Issue>> getFieldIssuesMap() {
    return fieldIssuesMap;
  }

  /**
   * Sets the value of the 'fieldIssuesMap' field.
   * @param value the value to set.
   */
  public void setFieldIssuesMap(java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Issue>> value) {
    this.fieldIssuesMap = value;
  }

  /**
   * Gets the value of the 'fieldLineageMap' field.
   */
  public java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Lineage>> getFieldLineageMap() {
    return fieldLineageMap;
  }

  /**
   * Sets the value of the 'fieldLineageMap' field.
   * @param value the value to set.
   */
  public void setFieldLineageMap(java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Lineage>> value) {
    this.fieldLineageMap = value;
  }

  /** Creates a new IssueLineageRecord RecordBuilder */
  public static org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.Builder newBuilder() {
    return new org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.Builder();
  }
  
  /** Creates a new IssueLineageRecord RecordBuilder by copying an existing Builder */
  public static org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.Builder newBuilder(org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.Builder other) {
    return new org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.Builder(other);
  }
  
  /** Creates a new IssueLineageRecord RecordBuilder by copying an existing IssueLineageRecord instance */
  public static org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.Builder newBuilder(org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord other) {
    return new org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for IssueLineageRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IssueLineageRecord>
    implements org.apache.avro.data.RecordBuilder<IssueLineageRecord> {

    private java.lang.CharSequence occurenceId;
    private java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Issue>> fieldIssuesMap;
    private java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Lineage>> fieldLineageMap;

    /** Creates a new Builder */
    private Builder() {
      super(org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.occurenceId)) {
        this.occurenceId = data().deepCopy(fields()[0].schema(), other.occurenceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fieldIssuesMap)) {
        this.fieldIssuesMap = data().deepCopy(fields()[1].schema(), other.fieldIssuesMap);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fieldLineageMap)) {
        this.fieldLineageMap = data().deepCopy(fields()[2].schema(), other.fieldLineageMap);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing IssueLineageRecord instance */
    private Builder(org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord other) {
            super(org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.occurenceId)) {
        this.occurenceId = data().deepCopy(fields()[0].schema(), other.occurenceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fieldIssuesMap)) {
        this.fieldIssuesMap = data().deepCopy(fields()[1].schema(), other.fieldIssuesMap);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fieldLineageMap)) {
        this.fieldLineageMap = data().deepCopy(fields()[2].schema(), other.fieldLineageMap);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'occurenceId' field */
    public java.lang.CharSequence getOccurenceId() {
      return occurenceId;
    }
    
    /** Sets the value of the 'occurenceId' field */
    public org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.Builder setOccurenceId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.occurenceId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'occurenceId' field has been set */
    public boolean hasOccurenceId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'occurenceId' field */
    public org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.Builder clearOccurenceId() {
      occurenceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'fieldIssuesMap' field */
    public java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Issue>> getFieldIssuesMap() {
      return fieldIssuesMap;
    }
    
    /** Sets the value of the 'fieldIssuesMap' field */
    public org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.Builder setFieldIssuesMap(java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Issue>> value) {
      validate(fields()[1], value);
      this.fieldIssuesMap = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'fieldIssuesMap' field has been set */
    public boolean hasFieldIssuesMap() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'fieldIssuesMap' field */
    public org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.Builder clearFieldIssuesMap() {
      fieldIssuesMap = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'fieldLineageMap' field */
    public java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Lineage>> getFieldLineageMap() {
      return fieldLineageMap;
    }
    
    /** Sets the value of the 'fieldLineageMap' field */
    public org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.Builder setFieldLineageMap(java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Lineage>> value) {
      validate(fields()[2], value);
      this.fieldLineageMap = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'fieldLineageMap' field has been set */
    public boolean hasFieldLineageMap() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'fieldLineageMap' field */
    public org.gbif.pipelines.core.functions.interpretation.error.IssueLineageRecord.Builder clearFieldLineageMap() {
      fieldLineageMap = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public IssueLineageRecord build() {
      try {
        IssueLineageRecord record = new IssueLineageRecord();
        record.occurenceId = fieldSetFlags()[0] ? this.occurenceId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.fieldIssuesMap = fieldSetFlags()[1] ? this.fieldIssuesMap : (java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Issue>>) defaultValue(fields()[1]);
        record.fieldLineageMap = fieldSetFlags()[2] ? this.fieldLineageMap : (java.util.Map<java.lang.CharSequence,java.util.List<org.gbif.pipelines.core.functions.interpretation.error.Lineage>>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
