/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gbif.pipelines.io.avro;  
@SuppressWarnings("all")
/** Interpreted values at the occurrence record level */
@org.apache.avro.specific.AvroGenerated
public class InterpretedExtendedRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InterpretedExtendedRecord\",\"namespace\":\"org.gbif.pipelines.io.avro\",\"doc\":\"Interpreted values at the occurrence record level\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The record id\"},{\"name\":\"basisOfRecord\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"sex\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lifeStage\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"establishmentMeans\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"individualCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"typeStatus\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The record id */
  @Deprecated public java.lang.String id;
  @Deprecated public java.lang.String basisOfRecord;
  @Deprecated public java.lang.String sex;
  @Deprecated public java.lang.String lifeStage;
  @Deprecated public java.lang.String establishmentMeans;
  @Deprecated public java.lang.Integer individualCount;
  @Deprecated public java.lang.String typeStatus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public InterpretedExtendedRecord() {}

  /**
   * All-args constructor.
   */
  public InterpretedExtendedRecord(java.lang.String id, java.lang.String basisOfRecord, java.lang.String sex, java.lang.String lifeStage, java.lang.String establishmentMeans, java.lang.Integer individualCount, java.lang.String typeStatus) {
    this.id = id;
    this.basisOfRecord = basisOfRecord;
    this.sex = sex;
    this.lifeStage = lifeStage;
    this.establishmentMeans = establishmentMeans;
    this.individualCount = individualCount;
    this.typeStatus = typeStatus;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return basisOfRecord;
    case 2: return sex;
    case 3: return lifeStage;
    case 4: return establishmentMeans;
    case 5: return individualCount;
    case 6: return typeStatus;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: basisOfRecord = (java.lang.String)value$; break;
    case 2: sex = (java.lang.String)value$; break;
    case 3: lifeStage = (java.lang.String)value$; break;
    case 4: establishmentMeans = (java.lang.String)value$; break;
    case 5: individualCount = (java.lang.Integer)value$; break;
    case 6: typeStatus = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * The record id   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The record id   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'basisOfRecord' field.
   */
  public java.lang.String getBasisOfRecord() {
    return basisOfRecord;
  }

  /**
   * Sets the value of the 'basisOfRecord' field.
   * @param value the value to set.
   */
  public void setBasisOfRecord(java.lang.String value) {
    this.basisOfRecord = value;
  }

  /**
   * Gets the value of the 'sex' field.
   */
  public java.lang.String getSex() {
    return sex;
  }

  /**
   * Sets the value of the 'sex' field.
   * @param value the value to set.
   */
  public void setSex(java.lang.String value) {
    this.sex = value;
  }

  /**
   * Gets the value of the 'lifeStage' field.
   */
  public java.lang.String getLifeStage() {
    return lifeStage;
  }

  /**
   * Sets the value of the 'lifeStage' field.
   * @param value the value to set.
   */
  public void setLifeStage(java.lang.String value) {
    this.lifeStage = value;
  }

  /**
   * Gets the value of the 'establishmentMeans' field.
   */
  public java.lang.String getEstablishmentMeans() {
    return establishmentMeans;
  }

  /**
   * Sets the value of the 'establishmentMeans' field.
   * @param value the value to set.
   */
  public void setEstablishmentMeans(java.lang.String value) {
    this.establishmentMeans = value;
  }

  /**
   * Gets the value of the 'individualCount' field.
   */
  public java.lang.Integer getIndividualCount() {
    return individualCount;
  }

  /**
   * Sets the value of the 'individualCount' field.
   * @param value the value to set.
   */
  public void setIndividualCount(java.lang.Integer value) {
    this.individualCount = value;
  }

  /**
   * Gets the value of the 'typeStatus' field.
   */
  public java.lang.String getTypeStatus() {
    return typeStatus;
  }

  /**
   * Sets the value of the 'typeStatus' field.
   * @param value the value to set.
   */
  public void setTypeStatus(java.lang.String value) {
    this.typeStatus = value;
  }

  /** Creates a new InterpretedExtendedRecord RecordBuilder */
  public static org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder newBuilder() {
    return new org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder();
  }
  
  /** Creates a new InterpretedExtendedRecord RecordBuilder by copying an existing Builder */
  public static org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder newBuilder(org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder other) {
    return new org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder(other);
  }
  
  /** Creates a new InterpretedExtendedRecord RecordBuilder by copying an existing InterpretedExtendedRecord instance */
  public static org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder newBuilder(org.gbif.pipelines.io.avro.InterpretedExtendedRecord other) {
    return new org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for InterpretedExtendedRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InterpretedExtendedRecord>
    implements org.apache.avro.data.RecordBuilder<InterpretedExtendedRecord> {

    private java.lang.String id;
    private java.lang.String basisOfRecord;
    private java.lang.String sex;
    private java.lang.String lifeStage;
    private java.lang.String establishmentMeans;
    private java.lang.Integer individualCount;
    private java.lang.String typeStatus;

    /** Creates a new Builder */
    private Builder() {
      super(org.gbif.pipelines.io.avro.InterpretedExtendedRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.basisOfRecord)) {
        this.basisOfRecord = data().deepCopy(fields()[1].schema(), other.basisOfRecord);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sex)) {
        this.sex = data().deepCopy(fields()[2].schema(), other.sex);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lifeStage)) {
        this.lifeStage = data().deepCopy(fields()[3].schema(), other.lifeStage);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.establishmentMeans)) {
        this.establishmentMeans = data().deepCopy(fields()[4].schema(), other.establishmentMeans);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.individualCount)) {
        this.individualCount = data().deepCopy(fields()[5].schema(), other.individualCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.typeStatus)) {
        this.typeStatus = data().deepCopy(fields()[6].schema(), other.typeStatus);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing InterpretedExtendedRecord instance */
    private Builder(org.gbif.pipelines.io.avro.InterpretedExtendedRecord other) {
            super(org.gbif.pipelines.io.avro.InterpretedExtendedRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.basisOfRecord)) {
        this.basisOfRecord = data().deepCopy(fields()[1].schema(), other.basisOfRecord);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sex)) {
        this.sex = data().deepCopy(fields()[2].schema(), other.sex);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lifeStage)) {
        this.lifeStage = data().deepCopy(fields()[3].schema(), other.lifeStage);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.establishmentMeans)) {
        this.establishmentMeans = data().deepCopy(fields()[4].schema(), other.establishmentMeans);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.individualCount)) {
        this.individualCount = data().deepCopy(fields()[5].schema(), other.individualCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.typeStatus)) {
        this.typeStatus = data().deepCopy(fields()[6].schema(), other.typeStatus);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.String getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'basisOfRecord' field */
    public java.lang.String getBasisOfRecord() {
      return basisOfRecord;
    }
    
    /** Sets the value of the 'basisOfRecord' field */
    public org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder setBasisOfRecord(java.lang.String value) {
      validate(fields()[1], value);
      this.basisOfRecord = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'basisOfRecord' field has been set */
    public boolean hasBasisOfRecord() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'basisOfRecord' field */
    public org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder clearBasisOfRecord() {
      basisOfRecord = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'sex' field */
    public java.lang.String getSex() {
      return sex;
    }
    
    /** Sets the value of the 'sex' field */
    public org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder setSex(java.lang.String value) {
      validate(fields()[2], value);
      this.sex = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'sex' field has been set */
    public boolean hasSex() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'sex' field */
    public org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder clearSex() {
      sex = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'lifeStage' field */
    public java.lang.String getLifeStage() {
      return lifeStage;
    }
    
    /** Sets the value of the 'lifeStage' field */
    public org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder setLifeStage(java.lang.String value) {
      validate(fields()[3], value);
      this.lifeStage = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'lifeStage' field has been set */
    public boolean hasLifeStage() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'lifeStage' field */
    public org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder clearLifeStage() {
      lifeStage = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'establishmentMeans' field */
    public java.lang.String getEstablishmentMeans() {
      return establishmentMeans;
    }
    
    /** Sets the value of the 'establishmentMeans' field */
    public org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder setEstablishmentMeans(java.lang.String value) {
      validate(fields()[4], value);
      this.establishmentMeans = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'establishmentMeans' field has been set */
    public boolean hasEstablishmentMeans() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'establishmentMeans' field */
    public org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder clearEstablishmentMeans() {
      establishmentMeans = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'individualCount' field */
    public java.lang.Integer getIndividualCount() {
      return individualCount;
    }
    
    /** Sets the value of the 'individualCount' field */
    public org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder setIndividualCount(java.lang.Integer value) {
      validate(fields()[5], value);
      this.individualCount = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'individualCount' field has been set */
    public boolean hasIndividualCount() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'individualCount' field */
    public org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder clearIndividualCount() {
      individualCount = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'typeStatus' field */
    public java.lang.String getTypeStatus() {
      return typeStatus;
    }
    
    /** Sets the value of the 'typeStatus' field */
    public org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder setTypeStatus(java.lang.String value) {
      validate(fields()[6], value);
      this.typeStatus = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'typeStatus' field has been set */
    public boolean hasTypeStatus() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'typeStatus' field */
    public org.gbif.pipelines.io.avro.InterpretedExtendedRecord.Builder clearTypeStatus() {
      typeStatus = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public InterpretedExtendedRecord build() {
      try {
        InterpretedExtendedRecord record = new InterpretedExtendedRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.basisOfRecord = fieldSetFlags()[1] ? this.basisOfRecord : (java.lang.String) defaultValue(fields()[1]);
        record.sex = fieldSetFlags()[2] ? this.sex : (java.lang.String) defaultValue(fields()[2]);
        record.lifeStage = fieldSetFlags()[3] ? this.lifeStage : (java.lang.String) defaultValue(fields()[3]);
        record.establishmentMeans = fieldSetFlags()[4] ? this.establishmentMeans : (java.lang.String) defaultValue(fields()[4]);
        record.individualCount = fieldSetFlags()[5] ? this.individualCount : (java.lang.Integer) defaultValue(fields()[5]);
        record.typeStatus = fieldSetFlags()[6] ? this.typeStatus : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
