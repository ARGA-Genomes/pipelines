/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gbif.pipelines.io.avro;  
@SuppressWarnings("all")
/** A container for interpretd location/geospatial DarwinCore terms. */
@org.apache.avro.specific.AvroGenerated
public class LocationRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LocationRecord\",\"namespace\":\"org.gbif.pipelines.io.avro\",\"doc\":\"A container for interpretd location/geospatial DarwinCore terms.\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The record id\"},{\"name\":\"continent\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"waterBody\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"countryCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"island\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"stateProvince\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"county\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"municipality\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"locality\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"minimumElevationInMeters\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"maximumElevationInMeters\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"minimumDepthInMeters\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"maximumDepthInMeters\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"minimumDistanceAboveSurfaceInMeters\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"maximumDistanceAboveSurfaceInMeters\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"decimalLatitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"decimalLongitude\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"geodeticDatum\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"coordinateUncertaintyInMeters\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"coordinatePrecision\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"pointRadiusSpatialFit\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"footprintWKT\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"footprintSRS\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"georeferencedDate\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The record id */
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence continent;
  @Deprecated public java.lang.CharSequence waterBody;
  @Deprecated public java.lang.CharSequence countryCode;
  @Deprecated public java.lang.CharSequence country;
  @Deprecated public java.lang.CharSequence island;
  @Deprecated public java.lang.CharSequence stateProvince;
  @Deprecated public java.lang.CharSequence county;
  @Deprecated public java.lang.CharSequence municipality;
  @Deprecated public java.lang.CharSequence locality;
  @Deprecated public java.lang.Double minimumElevationInMeters;
  @Deprecated public java.lang.Double maximumElevationInMeters;
  @Deprecated public java.lang.Double minimumDepthInMeters;
  @Deprecated public java.lang.Double maximumDepthInMeters;
  @Deprecated public java.lang.Double minimumDistanceAboveSurfaceInMeters;
  @Deprecated public java.lang.Double maximumDistanceAboveSurfaceInMeters;
  @Deprecated public java.lang.Double decimalLatitude;
  @Deprecated public java.lang.Double decimalLongitude;
  @Deprecated public java.lang.CharSequence geodeticDatum;
  @Deprecated public java.lang.Double coordinateUncertaintyInMeters;
  @Deprecated public java.lang.Double coordinatePrecision;
  @Deprecated public java.lang.Double pointRadiusSpatialFit;
  @Deprecated public java.lang.CharSequence footprintWKT;
  @Deprecated public java.lang.CharSequence footprintSRS;
  @Deprecated public java.lang.Long georeferencedDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public LocationRecord() {}

  /**
   * All-args constructor.
   */
  public LocationRecord(java.lang.CharSequence id, java.lang.CharSequence continent, java.lang.CharSequence waterBody, java.lang.CharSequence countryCode, java.lang.CharSequence country, java.lang.CharSequence island, java.lang.CharSequence stateProvince, java.lang.CharSequence county, java.lang.CharSequence municipality, java.lang.CharSequence locality, java.lang.Double minimumElevationInMeters, java.lang.Double maximumElevationInMeters, java.lang.Double minimumDepthInMeters, java.lang.Double maximumDepthInMeters, java.lang.Double minimumDistanceAboveSurfaceInMeters, java.lang.Double maximumDistanceAboveSurfaceInMeters, java.lang.Double decimalLatitude, java.lang.Double decimalLongitude, java.lang.CharSequence geodeticDatum, java.lang.Double coordinateUncertaintyInMeters, java.lang.Double coordinatePrecision, java.lang.Double pointRadiusSpatialFit, java.lang.CharSequence footprintWKT, java.lang.CharSequence footprintSRS, java.lang.Long georeferencedDate) {
    this.id = id;
    this.continent = continent;
    this.waterBody = waterBody;
    this.countryCode = countryCode;
    this.country = country;
    this.island = island;
    this.stateProvince = stateProvince;
    this.county = county;
    this.municipality = municipality;
    this.locality = locality;
    this.minimumElevationInMeters = minimumElevationInMeters;
    this.maximumElevationInMeters = maximumElevationInMeters;
    this.minimumDepthInMeters = minimumDepthInMeters;
    this.maximumDepthInMeters = maximumDepthInMeters;
    this.minimumDistanceAboveSurfaceInMeters = minimumDistanceAboveSurfaceInMeters;
    this.maximumDistanceAboveSurfaceInMeters = maximumDistanceAboveSurfaceInMeters;
    this.decimalLatitude = decimalLatitude;
    this.decimalLongitude = decimalLongitude;
    this.geodeticDatum = geodeticDatum;
    this.coordinateUncertaintyInMeters = coordinateUncertaintyInMeters;
    this.coordinatePrecision = coordinatePrecision;
    this.pointRadiusSpatialFit = pointRadiusSpatialFit;
    this.footprintWKT = footprintWKT;
    this.footprintSRS = footprintSRS;
    this.georeferencedDate = georeferencedDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return continent;
    case 2: return waterBody;
    case 3: return countryCode;
    case 4: return country;
    case 5: return island;
    case 6: return stateProvince;
    case 7: return county;
    case 8: return municipality;
    case 9: return locality;
    case 10: return minimumElevationInMeters;
    case 11: return maximumElevationInMeters;
    case 12: return minimumDepthInMeters;
    case 13: return maximumDepthInMeters;
    case 14: return minimumDistanceAboveSurfaceInMeters;
    case 15: return maximumDistanceAboveSurfaceInMeters;
    case 16: return decimalLatitude;
    case 17: return decimalLongitude;
    case 18: return geodeticDatum;
    case 19: return coordinateUncertaintyInMeters;
    case 20: return coordinatePrecision;
    case 21: return pointRadiusSpatialFit;
    case 22: return footprintWKT;
    case 23: return footprintSRS;
    case 24: return georeferencedDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: continent = (java.lang.CharSequence)value$; break;
    case 2: waterBody = (java.lang.CharSequence)value$; break;
    case 3: countryCode = (java.lang.CharSequence)value$; break;
    case 4: country = (java.lang.CharSequence)value$; break;
    case 5: island = (java.lang.CharSequence)value$; break;
    case 6: stateProvince = (java.lang.CharSequence)value$; break;
    case 7: county = (java.lang.CharSequence)value$; break;
    case 8: municipality = (java.lang.CharSequence)value$; break;
    case 9: locality = (java.lang.CharSequence)value$; break;
    case 10: minimumElevationInMeters = (java.lang.Double)value$; break;
    case 11: maximumElevationInMeters = (java.lang.Double)value$; break;
    case 12: minimumDepthInMeters = (java.lang.Double)value$; break;
    case 13: maximumDepthInMeters = (java.lang.Double)value$; break;
    case 14: minimumDistanceAboveSurfaceInMeters = (java.lang.Double)value$; break;
    case 15: maximumDistanceAboveSurfaceInMeters = (java.lang.Double)value$; break;
    case 16: decimalLatitude = (java.lang.Double)value$; break;
    case 17: decimalLongitude = (java.lang.Double)value$; break;
    case 18: geodeticDatum = (java.lang.CharSequence)value$; break;
    case 19: coordinateUncertaintyInMeters = (java.lang.Double)value$; break;
    case 20: coordinatePrecision = (java.lang.Double)value$; break;
    case 21: pointRadiusSpatialFit = (java.lang.Double)value$; break;
    case 22: footprintWKT = (java.lang.CharSequence)value$; break;
    case 23: footprintSRS = (java.lang.CharSequence)value$; break;
    case 24: georeferencedDate = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * The record id   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The record id   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'continent' field.
   */
  public java.lang.CharSequence getContinent() {
    return continent;
  }

  /**
   * Sets the value of the 'continent' field.
   * @param value the value to set.
   */
  public void setContinent(java.lang.CharSequence value) {
    this.continent = value;
  }

  /**
   * Gets the value of the 'waterBody' field.
   */
  public java.lang.CharSequence getWaterBody() {
    return waterBody;
  }

  /**
   * Sets the value of the 'waterBody' field.
   * @param value the value to set.
   */
  public void setWaterBody(java.lang.CharSequence value) {
    this.waterBody = value;
  }

  /**
   * Gets the value of the 'countryCode' field.
   */
  public java.lang.CharSequence getCountryCode() {
    return countryCode;
  }

  /**
   * Sets the value of the 'countryCode' field.
   * @param value the value to set.
   */
  public void setCountryCode(java.lang.CharSequence value) {
    this.countryCode = value;
  }

  /**
   * Gets the value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'island' field.
   */
  public java.lang.CharSequence getIsland() {
    return island;
  }

  /**
   * Sets the value of the 'island' field.
   * @param value the value to set.
   */
  public void setIsland(java.lang.CharSequence value) {
    this.island = value;
  }

  /**
   * Gets the value of the 'stateProvince' field.
   */
  public java.lang.CharSequence getStateProvince() {
    return stateProvince;
  }

  /**
   * Sets the value of the 'stateProvince' field.
   * @param value the value to set.
   */
  public void setStateProvince(java.lang.CharSequence value) {
    this.stateProvince = value;
  }

  /**
   * Gets the value of the 'county' field.
   */
  public java.lang.CharSequence getCounty() {
    return county;
  }

  /**
   * Sets the value of the 'county' field.
   * @param value the value to set.
   */
  public void setCounty(java.lang.CharSequence value) {
    this.county = value;
  }

  /**
   * Gets the value of the 'municipality' field.
   */
  public java.lang.CharSequence getMunicipality() {
    return municipality;
  }

  /**
   * Sets the value of the 'municipality' field.
   * @param value the value to set.
   */
  public void setMunicipality(java.lang.CharSequence value) {
    this.municipality = value;
  }

  /**
   * Gets the value of the 'locality' field.
   */
  public java.lang.CharSequence getLocality() {
    return locality;
  }

  /**
   * Sets the value of the 'locality' field.
   * @param value the value to set.
   */
  public void setLocality(java.lang.CharSequence value) {
    this.locality = value;
  }

  /**
   * Gets the value of the 'minimumElevationInMeters' field.
   */
  public java.lang.Double getMinimumElevationInMeters() {
    return minimumElevationInMeters;
  }

  /**
   * Sets the value of the 'minimumElevationInMeters' field.
   * @param value the value to set.
   */
  public void setMinimumElevationInMeters(java.lang.Double value) {
    this.minimumElevationInMeters = value;
  }

  /**
   * Gets the value of the 'maximumElevationInMeters' field.
   */
  public java.lang.Double getMaximumElevationInMeters() {
    return maximumElevationInMeters;
  }

  /**
   * Sets the value of the 'maximumElevationInMeters' field.
   * @param value the value to set.
   */
  public void setMaximumElevationInMeters(java.lang.Double value) {
    this.maximumElevationInMeters = value;
  }

  /**
   * Gets the value of the 'minimumDepthInMeters' field.
   */
  public java.lang.Double getMinimumDepthInMeters() {
    return minimumDepthInMeters;
  }

  /**
   * Sets the value of the 'minimumDepthInMeters' field.
   * @param value the value to set.
   */
  public void setMinimumDepthInMeters(java.lang.Double value) {
    this.minimumDepthInMeters = value;
  }

  /**
   * Gets the value of the 'maximumDepthInMeters' field.
   */
  public java.lang.Double getMaximumDepthInMeters() {
    return maximumDepthInMeters;
  }

  /**
   * Sets the value of the 'maximumDepthInMeters' field.
   * @param value the value to set.
   */
  public void setMaximumDepthInMeters(java.lang.Double value) {
    this.maximumDepthInMeters = value;
  }

  /**
   * Gets the value of the 'minimumDistanceAboveSurfaceInMeters' field.
   */
  public java.lang.Double getMinimumDistanceAboveSurfaceInMeters() {
    return minimumDistanceAboveSurfaceInMeters;
  }

  /**
   * Sets the value of the 'minimumDistanceAboveSurfaceInMeters' field.
   * @param value the value to set.
   */
  public void setMinimumDistanceAboveSurfaceInMeters(java.lang.Double value) {
    this.minimumDistanceAboveSurfaceInMeters = value;
  }

  /**
   * Gets the value of the 'maximumDistanceAboveSurfaceInMeters' field.
   */
  public java.lang.Double getMaximumDistanceAboveSurfaceInMeters() {
    return maximumDistanceAboveSurfaceInMeters;
  }

  /**
   * Sets the value of the 'maximumDistanceAboveSurfaceInMeters' field.
   * @param value the value to set.
   */
  public void setMaximumDistanceAboveSurfaceInMeters(java.lang.Double value) {
    this.maximumDistanceAboveSurfaceInMeters = value;
  }

  /**
   * Gets the value of the 'decimalLatitude' field.
   */
  public java.lang.Double getDecimalLatitude() {
    return decimalLatitude;
  }

  /**
   * Sets the value of the 'decimalLatitude' field.
   * @param value the value to set.
   */
  public void setDecimalLatitude(java.lang.Double value) {
    this.decimalLatitude = value;
  }

  /**
   * Gets the value of the 'decimalLongitude' field.
   */
  public java.lang.Double getDecimalLongitude() {
    return decimalLongitude;
  }

  /**
   * Sets the value of the 'decimalLongitude' field.
   * @param value the value to set.
   */
  public void setDecimalLongitude(java.lang.Double value) {
    this.decimalLongitude = value;
  }

  /**
   * Gets the value of the 'geodeticDatum' field.
   */
  public java.lang.CharSequence getGeodeticDatum() {
    return geodeticDatum;
  }

  /**
   * Sets the value of the 'geodeticDatum' field.
   * @param value the value to set.
   */
  public void setGeodeticDatum(java.lang.CharSequence value) {
    this.geodeticDatum = value;
  }

  /**
   * Gets the value of the 'coordinateUncertaintyInMeters' field.
   */
  public java.lang.Double getCoordinateUncertaintyInMeters() {
    return coordinateUncertaintyInMeters;
  }

  /**
   * Sets the value of the 'coordinateUncertaintyInMeters' field.
   * @param value the value to set.
   */
  public void setCoordinateUncertaintyInMeters(java.lang.Double value) {
    this.coordinateUncertaintyInMeters = value;
  }

  /**
   * Gets the value of the 'coordinatePrecision' field.
   */
  public java.lang.Double getCoordinatePrecision() {
    return coordinatePrecision;
  }

  /**
   * Sets the value of the 'coordinatePrecision' field.
   * @param value the value to set.
   */
  public void setCoordinatePrecision(java.lang.Double value) {
    this.coordinatePrecision = value;
  }

  /**
   * Gets the value of the 'pointRadiusSpatialFit' field.
   */
  public java.lang.Double getPointRadiusSpatialFit() {
    return pointRadiusSpatialFit;
  }

  /**
   * Sets the value of the 'pointRadiusSpatialFit' field.
   * @param value the value to set.
   */
  public void setPointRadiusSpatialFit(java.lang.Double value) {
    this.pointRadiusSpatialFit = value;
  }

  /**
   * Gets the value of the 'footprintWKT' field.
   */
  public java.lang.CharSequence getFootprintWKT() {
    return footprintWKT;
  }

  /**
   * Sets the value of the 'footprintWKT' field.
   * @param value the value to set.
   */
  public void setFootprintWKT(java.lang.CharSequence value) {
    this.footprintWKT = value;
  }

  /**
   * Gets the value of the 'footprintSRS' field.
   */
  public java.lang.CharSequence getFootprintSRS() {
    return footprintSRS;
  }

  /**
   * Sets the value of the 'footprintSRS' field.
   * @param value the value to set.
   */
  public void setFootprintSRS(java.lang.CharSequence value) {
    this.footprintSRS = value;
  }

  /**
   * Gets the value of the 'georeferencedDate' field.
   */
  public java.lang.Long getGeoreferencedDate() {
    return georeferencedDate;
  }

  /**
   * Sets the value of the 'georeferencedDate' field.
   * @param value the value to set.
   */
  public void setGeoreferencedDate(java.lang.Long value) {
    this.georeferencedDate = value;
  }

  /** Creates a new LocationRecord RecordBuilder */
  public static org.gbif.pipelines.io.avro.LocationRecord.Builder newBuilder() {
    return new org.gbif.pipelines.io.avro.LocationRecord.Builder();
  }
  
  /** Creates a new LocationRecord RecordBuilder by copying an existing Builder */
  public static org.gbif.pipelines.io.avro.LocationRecord.Builder newBuilder(org.gbif.pipelines.io.avro.LocationRecord.Builder other) {
    return new org.gbif.pipelines.io.avro.LocationRecord.Builder(other);
  }
  
  /** Creates a new LocationRecord RecordBuilder by copying an existing LocationRecord instance */
  public static org.gbif.pipelines.io.avro.LocationRecord.Builder newBuilder(org.gbif.pipelines.io.avro.LocationRecord other) {
    return new org.gbif.pipelines.io.avro.LocationRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for LocationRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LocationRecord>
    implements org.apache.avro.data.RecordBuilder<LocationRecord> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence continent;
    private java.lang.CharSequence waterBody;
    private java.lang.CharSequence countryCode;
    private java.lang.CharSequence country;
    private java.lang.CharSequence island;
    private java.lang.CharSequence stateProvince;
    private java.lang.CharSequence county;
    private java.lang.CharSequence municipality;
    private java.lang.CharSequence locality;
    private java.lang.Double minimumElevationInMeters;
    private java.lang.Double maximumElevationInMeters;
    private java.lang.Double minimumDepthInMeters;
    private java.lang.Double maximumDepthInMeters;
    private java.lang.Double minimumDistanceAboveSurfaceInMeters;
    private java.lang.Double maximumDistanceAboveSurfaceInMeters;
    private java.lang.Double decimalLatitude;
    private java.lang.Double decimalLongitude;
    private java.lang.CharSequence geodeticDatum;
    private java.lang.Double coordinateUncertaintyInMeters;
    private java.lang.Double coordinatePrecision;
    private java.lang.Double pointRadiusSpatialFit;
    private java.lang.CharSequence footprintWKT;
    private java.lang.CharSequence footprintSRS;
    private java.lang.Long georeferencedDate;

    /** Creates a new Builder */
    private Builder() {
      super(org.gbif.pipelines.io.avro.LocationRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gbif.pipelines.io.avro.LocationRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.continent)) {
        this.continent = data().deepCopy(fields()[1].schema(), other.continent);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.waterBody)) {
        this.waterBody = data().deepCopy(fields()[2].schema(), other.waterBody);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[3].schema(), other.countryCode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.country)) {
        this.country = data().deepCopy(fields()[4].schema(), other.country);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.island)) {
        this.island = data().deepCopy(fields()[5].schema(), other.island);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.stateProvince)) {
        this.stateProvince = data().deepCopy(fields()[6].schema(), other.stateProvince);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.county)) {
        this.county = data().deepCopy(fields()[7].schema(), other.county);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.municipality)) {
        this.municipality = data().deepCopy(fields()[8].schema(), other.municipality);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.locality)) {
        this.locality = data().deepCopy(fields()[9].schema(), other.locality);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.minimumElevationInMeters)) {
        this.minimumElevationInMeters = data().deepCopy(fields()[10].schema(), other.minimumElevationInMeters);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.maximumElevationInMeters)) {
        this.maximumElevationInMeters = data().deepCopy(fields()[11].schema(), other.maximumElevationInMeters);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.minimumDepthInMeters)) {
        this.minimumDepthInMeters = data().deepCopy(fields()[12].schema(), other.minimumDepthInMeters);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.maximumDepthInMeters)) {
        this.maximumDepthInMeters = data().deepCopy(fields()[13].schema(), other.maximumDepthInMeters);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.minimumDistanceAboveSurfaceInMeters)) {
        this.minimumDistanceAboveSurfaceInMeters = data().deepCopy(fields()[14].schema(), other.minimumDistanceAboveSurfaceInMeters);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.maximumDistanceAboveSurfaceInMeters)) {
        this.maximumDistanceAboveSurfaceInMeters = data().deepCopy(fields()[15].schema(), other.maximumDistanceAboveSurfaceInMeters);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.decimalLatitude)) {
        this.decimalLatitude = data().deepCopy(fields()[16].schema(), other.decimalLatitude);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.decimalLongitude)) {
        this.decimalLongitude = data().deepCopy(fields()[17].schema(), other.decimalLongitude);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.geodeticDatum)) {
        this.geodeticDatum = data().deepCopy(fields()[18].schema(), other.geodeticDatum);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.coordinateUncertaintyInMeters)) {
        this.coordinateUncertaintyInMeters = data().deepCopy(fields()[19].schema(), other.coordinateUncertaintyInMeters);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.coordinatePrecision)) {
        this.coordinatePrecision = data().deepCopy(fields()[20].schema(), other.coordinatePrecision);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.pointRadiusSpatialFit)) {
        this.pointRadiusSpatialFit = data().deepCopy(fields()[21].schema(), other.pointRadiusSpatialFit);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.footprintWKT)) {
        this.footprintWKT = data().deepCopy(fields()[22].schema(), other.footprintWKT);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.footprintSRS)) {
        this.footprintSRS = data().deepCopy(fields()[23].schema(), other.footprintSRS);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.georeferencedDate)) {
        this.georeferencedDate = data().deepCopy(fields()[24].schema(), other.georeferencedDate);
        fieldSetFlags()[24] = true;
      }
    }
    
    /** Creates a Builder by copying an existing LocationRecord instance */
    private Builder(org.gbif.pipelines.io.avro.LocationRecord other) {
            super(org.gbif.pipelines.io.avro.LocationRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.continent)) {
        this.continent = data().deepCopy(fields()[1].schema(), other.continent);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.waterBody)) {
        this.waterBody = data().deepCopy(fields()[2].schema(), other.waterBody);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[3].schema(), other.countryCode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.country)) {
        this.country = data().deepCopy(fields()[4].schema(), other.country);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.island)) {
        this.island = data().deepCopy(fields()[5].schema(), other.island);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.stateProvince)) {
        this.stateProvince = data().deepCopy(fields()[6].schema(), other.stateProvince);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.county)) {
        this.county = data().deepCopy(fields()[7].schema(), other.county);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.municipality)) {
        this.municipality = data().deepCopy(fields()[8].schema(), other.municipality);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.locality)) {
        this.locality = data().deepCopy(fields()[9].schema(), other.locality);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.minimumElevationInMeters)) {
        this.minimumElevationInMeters = data().deepCopy(fields()[10].schema(), other.minimumElevationInMeters);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.maximumElevationInMeters)) {
        this.maximumElevationInMeters = data().deepCopy(fields()[11].schema(), other.maximumElevationInMeters);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.minimumDepthInMeters)) {
        this.minimumDepthInMeters = data().deepCopy(fields()[12].schema(), other.minimumDepthInMeters);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.maximumDepthInMeters)) {
        this.maximumDepthInMeters = data().deepCopy(fields()[13].schema(), other.maximumDepthInMeters);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.minimumDistanceAboveSurfaceInMeters)) {
        this.minimumDistanceAboveSurfaceInMeters = data().deepCopy(fields()[14].schema(), other.minimumDistanceAboveSurfaceInMeters);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.maximumDistanceAboveSurfaceInMeters)) {
        this.maximumDistanceAboveSurfaceInMeters = data().deepCopy(fields()[15].schema(), other.maximumDistanceAboveSurfaceInMeters);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.decimalLatitude)) {
        this.decimalLatitude = data().deepCopy(fields()[16].schema(), other.decimalLatitude);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.decimalLongitude)) {
        this.decimalLongitude = data().deepCopy(fields()[17].schema(), other.decimalLongitude);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.geodeticDatum)) {
        this.geodeticDatum = data().deepCopy(fields()[18].schema(), other.geodeticDatum);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.coordinateUncertaintyInMeters)) {
        this.coordinateUncertaintyInMeters = data().deepCopy(fields()[19].schema(), other.coordinateUncertaintyInMeters);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.coordinatePrecision)) {
        this.coordinatePrecision = data().deepCopy(fields()[20].schema(), other.coordinatePrecision);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.pointRadiusSpatialFit)) {
        this.pointRadiusSpatialFit = data().deepCopy(fields()[21].schema(), other.pointRadiusSpatialFit);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.footprintWKT)) {
        this.footprintWKT = data().deepCopy(fields()[22].schema(), other.footprintWKT);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.footprintSRS)) {
        this.footprintSRS = data().deepCopy(fields()[23].schema(), other.footprintSRS);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.georeferencedDate)) {
        this.georeferencedDate = data().deepCopy(fields()[24].schema(), other.georeferencedDate);
        fieldSetFlags()[24] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'continent' field */
    public java.lang.CharSequence getContinent() {
      return continent;
    }
    
    /** Sets the value of the 'continent' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setContinent(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.continent = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'continent' field has been set */
    public boolean hasContinent() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'continent' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearContinent() {
      continent = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'waterBody' field */
    public java.lang.CharSequence getWaterBody() {
      return waterBody;
    }
    
    /** Sets the value of the 'waterBody' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setWaterBody(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.waterBody = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'waterBody' field has been set */
    public boolean hasWaterBody() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'waterBody' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearWaterBody() {
      waterBody = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'countryCode' field */
    public java.lang.CharSequence getCountryCode() {
      return countryCode;
    }
    
    /** Sets the value of the 'countryCode' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setCountryCode(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.countryCode = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'countryCode' field has been set */
    public boolean hasCountryCode() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'countryCode' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearCountryCode() {
      countryCode = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'country' field */
    public java.lang.CharSequence getCountry() {
      return country;
    }
    
    /** Sets the value of the 'country' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.country = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'country' field has been set */
    public boolean hasCountry() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'country' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearCountry() {
      country = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'island' field */
    public java.lang.CharSequence getIsland() {
      return island;
    }
    
    /** Sets the value of the 'island' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setIsland(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.island = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'island' field has been set */
    public boolean hasIsland() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'island' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearIsland() {
      island = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'stateProvince' field */
    public java.lang.CharSequence getStateProvince() {
      return stateProvince;
    }
    
    /** Sets the value of the 'stateProvince' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setStateProvince(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.stateProvince = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'stateProvince' field has been set */
    public boolean hasStateProvince() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'stateProvince' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearStateProvince() {
      stateProvince = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'county' field */
    public java.lang.CharSequence getCounty() {
      return county;
    }
    
    /** Sets the value of the 'county' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setCounty(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.county = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'county' field has been set */
    public boolean hasCounty() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'county' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearCounty() {
      county = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'municipality' field */
    public java.lang.CharSequence getMunicipality() {
      return municipality;
    }
    
    /** Sets the value of the 'municipality' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setMunicipality(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.municipality = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'municipality' field has been set */
    public boolean hasMunicipality() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'municipality' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearMunicipality() {
      municipality = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'locality' field */
    public java.lang.CharSequence getLocality() {
      return locality;
    }
    
    /** Sets the value of the 'locality' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setLocality(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.locality = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'locality' field has been set */
    public boolean hasLocality() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'locality' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearLocality() {
      locality = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'minimumElevationInMeters' field */
    public java.lang.Double getMinimumElevationInMeters() {
      return minimumElevationInMeters;
    }
    
    /** Sets the value of the 'minimumElevationInMeters' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setMinimumElevationInMeters(java.lang.Double value) {
      validate(fields()[10], value);
      this.minimumElevationInMeters = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'minimumElevationInMeters' field has been set */
    public boolean hasMinimumElevationInMeters() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'minimumElevationInMeters' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearMinimumElevationInMeters() {
      minimumElevationInMeters = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'maximumElevationInMeters' field */
    public java.lang.Double getMaximumElevationInMeters() {
      return maximumElevationInMeters;
    }
    
    /** Sets the value of the 'maximumElevationInMeters' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setMaximumElevationInMeters(java.lang.Double value) {
      validate(fields()[11], value);
      this.maximumElevationInMeters = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'maximumElevationInMeters' field has been set */
    public boolean hasMaximumElevationInMeters() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'maximumElevationInMeters' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearMaximumElevationInMeters() {
      maximumElevationInMeters = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'minimumDepthInMeters' field */
    public java.lang.Double getMinimumDepthInMeters() {
      return minimumDepthInMeters;
    }
    
    /** Sets the value of the 'minimumDepthInMeters' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setMinimumDepthInMeters(java.lang.Double value) {
      validate(fields()[12], value);
      this.minimumDepthInMeters = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'minimumDepthInMeters' field has been set */
    public boolean hasMinimumDepthInMeters() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'minimumDepthInMeters' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearMinimumDepthInMeters() {
      minimumDepthInMeters = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'maximumDepthInMeters' field */
    public java.lang.Double getMaximumDepthInMeters() {
      return maximumDepthInMeters;
    }
    
    /** Sets the value of the 'maximumDepthInMeters' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setMaximumDepthInMeters(java.lang.Double value) {
      validate(fields()[13], value);
      this.maximumDepthInMeters = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'maximumDepthInMeters' field has been set */
    public boolean hasMaximumDepthInMeters() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'maximumDepthInMeters' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearMaximumDepthInMeters() {
      maximumDepthInMeters = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'minimumDistanceAboveSurfaceInMeters' field */
    public java.lang.Double getMinimumDistanceAboveSurfaceInMeters() {
      return minimumDistanceAboveSurfaceInMeters;
    }
    
    /** Sets the value of the 'minimumDistanceAboveSurfaceInMeters' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setMinimumDistanceAboveSurfaceInMeters(java.lang.Double value) {
      validate(fields()[14], value);
      this.minimumDistanceAboveSurfaceInMeters = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'minimumDistanceAboveSurfaceInMeters' field has been set */
    public boolean hasMinimumDistanceAboveSurfaceInMeters() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'minimumDistanceAboveSurfaceInMeters' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearMinimumDistanceAboveSurfaceInMeters() {
      minimumDistanceAboveSurfaceInMeters = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'maximumDistanceAboveSurfaceInMeters' field */
    public java.lang.Double getMaximumDistanceAboveSurfaceInMeters() {
      return maximumDistanceAboveSurfaceInMeters;
    }
    
    /** Sets the value of the 'maximumDistanceAboveSurfaceInMeters' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setMaximumDistanceAboveSurfaceInMeters(java.lang.Double value) {
      validate(fields()[15], value);
      this.maximumDistanceAboveSurfaceInMeters = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'maximumDistanceAboveSurfaceInMeters' field has been set */
    public boolean hasMaximumDistanceAboveSurfaceInMeters() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'maximumDistanceAboveSurfaceInMeters' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearMaximumDistanceAboveSurfaceInMeters() {
      maximumDistanceAboveSurfaceInMeters = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'decimalLatitude' field */
    public java.lang.Double getDecimalLatitude() {
      return decimalLatitude;
    }
    
    /** Sets the value of the 'decimalLatitude' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setDecimalLatitude(java.lang.Double value) {
      validate(fields()[16], value);
      this.decimalLatitude = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'decimalLatitude' field has been set */
    public boolean hasDecimalLatitude() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'decimalLatitude' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearDecimalLatitude() {
      decimalLatitude = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'decimalLongitude' field */
    public java.lang.Double getDecimalLongitude() {
      return decimalLongitude;
    }
    
    /** Sets the value of the 'decimalLongitude' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setDecimalLongitude(java.lang.Double value) {
      validate(fields()[17], value);
      this.decimalLongitude = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'decimalLongitude' field has been set */
    public boolean hasDecimalLongitude() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'decimalLongitude' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearDecimalLongitude() {
      decimalLongitude = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'geodeticDatum' field */
    public java.lang.CharSequence getGeodeticDatum() {
      return geodeticDatum;
    }
    
    /** Sets the value of the 'geodeticDatum' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setGeodeticDatum(java.lang.CharSequence value) {
      validate(fields()[18], value);
      this.geodeticDatum = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'geodeticDatum' field has been set */
    public boolean hasGeodeticDatum() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'geodeticDatum' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearGeodeticDatum() {
      geodeticDatum = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'coordinateUncertaintyInMeters' field */
    public java.lang.Double getCoordinateUncertaintyInMeters() {
      return coordinateUncertaintyInMeters;
    }
    
    /** Sets the value of the 'coordinateUncertaintyInMeters' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setCoordinateUncertaintyInMeters(java.lang.Double value) {
      validate(fields()[19], value);
      this.coordinateUncertaintyInMeters = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'coordinateUncertaintyInMeters' field has been set */
    public boolean hasCoordinateUncertaintyInMeters() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'coordinateUncertaintyInMeters' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearCoordinateUncertaintyInMeters() {
      coordinateUncertaintyInMeters = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'coordinatePrecision' field */
    public java.lang.Double getCoordinatePrecision() {
      return coordinatePrecision;
    }
    
    /** Sets the value of the 'coordinatePrecision' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setCoordinatePrecision(java.lang.Double value) {
      validate(fields()[20], value);
      this.coordinatePrecision = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'coordinatePrecision' field has been set */
    public boolean hasCoordinatePrecision() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'coordinatePrecision' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearCoordinatePrecision() {
      coordinatePrecision = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /** Gets the value of the 'pointRadiusSpatialFit' field */
    public java.lang.Double getPointRadiusSpatialFit() {
      return pointRadiusSpatialFit;
    }
    
    /** Sets the value of the 'pointRadiusSpatialFit' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setPointRadiusSpatialFit(java.lang.Double value) {
      validate(fields()[21], value);
      this.pointRadiusSpatialFit = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'pointRadiusSpatialFit' field has been set */
    public boolean hasPointRadiusSpatialFit() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'pointRadiusSpatialFit' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearPointRadiusSpatialFit() {
      pointRadiusSpatialFit = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /** Gets the value of the 'footprintWKT' field */
    public java.lang.CharSequence getFootprintWKT() {
      return footprintWKT;
    }
    
    /** Sets the value of the 'footprintWKT' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setFootprintWKT(java.lang.CharSequence value) {
      validate(fields()[22], value);
      this.footprintWKT = value;
      fieldSetFlags()[22] = true;
      return this; 
    }
    
    /** Checks whether the 'footprintWKT' field has been set */
    public boolean hasFootprintWKT() {
      return fieldSetFlags()[22];
    }
    
    /** Clears the value of the 'footprintWKT' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearFootprintWKT() {
      footprintWKT = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /** Gets the value of the 'footprintSRS' field */
    public java.lang.CharSequence getFootprintSRS() {
      return footprintSRS;
    }
    
    /** Sets the value of the 'footprintSRS' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setFootprintSRS(java.lang.CharSequence value) {
      validate(fields()[23], value);
      this.footprintSRS = value;
      fieldSetFlags()[23] = true;
      return this; 
    }
    
    /** Checks whether the 'footprintSRS' field has been set */
    public boolean hasFootprintSRS() {
      return fieldSetFlags()[23];
    }
    
    /** Clears the value of the 'footprintSRS' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearFootprintSRS() {
      footprintSRS = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /** Gets the value of the 'georeferencedDate' field */
    public java.lang.Long getGeoreferencedDate() {
      return georeferencedDate;
    }
    
    /** Sets the value of the 'georeferencedDate' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder setGeoreferencedDate(java.lang.Long value) {
      validate(fields()[24], value);
      this.georeferencedDate = value;
      fieldSetFlags()[24] = true;
      return this; 
    }
    
    /** Checks whether the 'georeferencedDate' field has been set */
    public boolean hasGeoreferencedDate() {
      return fieldSetFlags()[24];
    }
    
    /** Clears the value of the 'georeferencedDate' field */
    public org.gbif.pipelines.io.avro.LocationRecord.Builder clearGeoreferencedDate() {
      georeferencedDate = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    @Override
    public LocationRecord build() {
      try {
        LocationRecord record = new LocationRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.continent = fieldSetFlags()[1] ? this.continent : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.waterBody = fieldSetFlags()[2] ? this.waterBody : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.countryCode = fieldSetFlags()[3] ? this.countryCode : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.country = fieldSetFlags()[4] ? this.country : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.island = fieldSetFlags()[5] ? this.island : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.stateProvince = fieldSetFlags()[6] ? this.stateProvince : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.county = fieldSetFlags()[7] ? this.county : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.municipality = fieldSetFlags()[8] ? this.municipality : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.locality = fieldSetFlags()[9] ? this.locality : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.minimumElevationInMeters = fieldSetFlags()[10] ? this.minimumElevationInMeters : (java.lang.Double) defaultValue(fields()[10]);
        record.maximumElevationInMeters = fieldSetFlags()[11] ? this.maximumElevationInMeters : (java.lang.Double) defaultValue(fields()[11]);
        record.minimumDepthInMeters = fieldSetFlags()[12] ? this.minimumDepthInMeters : (java.lang.Double) defaultValue(fields()[12]);
        record.maximumDepthInMeters = fieldSetFlags()[13] ? this.maximumDepthInMeters : (java.lang.Double) defaultValue(fields()[13]);
        record.minimumDistanceAboveSurfaceInMeters = fieldSetFlags()[14] ? this.minimumDistanceAboveSurfaceInMeters : (java.lang.Double) defaultValue(fields()[14]);
        record.maximumDistanceAboveSurfaceInMeters = fieldSetFlags()[15] ? this.maximumDistanceAboveSurfaceInMeters : (java.lang.Double) defaultValue(fields()[15]);
        record.decimalLatitude = fieldSetFlags()[16] ? this.decimalLatitude : (java.lang.Double) defaultValue(fields()[16]);
        record.decimalLongitude = fieldSetFlags()[17] ? this.decimalLongitude : (java.lang.Double) defaultValue(fields()[17]);
        record.geodeticDatum = fieldSetFlags()[18] ? this.geodeticDatum : (java.lang.CharSequence) defaultValue(fields()[18]);
        record.coordinateUncertaintyInMeters = fieldSetFlags()[19] ? this.coordinateUncertaintyInMeters : (java.lang.Double) defaultValue(fields()[19]);
        record.coordinatePrecision = fieldSetFlags()[20] ? this.coordinatePrecision : (java.lang.Double) defaultValue(fields()[20]);
        record.pointRadiusSpatialFit = fieldSetFlags()[21] ? this.pointRadiusSpatialFit : (java.lang.Double) defaultValue(fields()[21]);
        record.footprintWKT = fieldSetFlags()[22] ? this.footprintWKT : (java.lang.CharSequence) defaultValue(fields()[22]);
        record.footprintSRS = fieldSetFlags()[23] ? this.footprintSRS : (java.lang.CharSequence) defaultValue(fields()[23]);
        record.georeferencedDate = fieldSetFlags()[24] ? this.georeferencedDate : (java.lang.Long) defaultValue(fields()[24]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
