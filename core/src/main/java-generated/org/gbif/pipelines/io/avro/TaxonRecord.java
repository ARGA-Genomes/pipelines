/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gbif.pipelines.io.avro;  
@SuppressWarnings("all")
/** A container for taxon DarwinCore terms been interpreted. */
@org.apache.avro.specific.AvroGenerated
public class TaxonRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TaxonRecord\",\"namespace\":\"org.gbif.pipelines.io.avro\",\"doc\":\"A container for taxon DarwinCore terms been interpreted.\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The record id\"},{\"name\":\"genericName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"scientificName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"kingdom\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"kingdomKey\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"phylum\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"phylumKey\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"genus\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"genusKey\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The record id */
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence genericName;
  @Deprecated public java.lang.CharSequence scientificName;
  @Deprecated public java.lang.CharSequence kingdom;
  @Deprecated public java.lang.Integer kingdomKey;
  @Deprecated public java.lang.CharSequence phylum;
  @Deprecated public java.lang.Integer phylumKey;
  @Deprecated public java.lang.CharSequence genus;
  @Deprecated public java.lang.Integer genusKey;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TaxonRecord() {}

  /**
   * All-args constructor.
   */
  public TaxonRecord(java.lang.CharSequence id, java.lang.CharSequence genericName, java.lang.CharSequence scientificName, java.lang.CharSequence kingdom, java.lang.Integer kingdomKey, java.lang.CharSequence phylum, java.lang.Integer phylumKey, java.lang.CharSequence genus, java.lang.Integer genusKey) {
    this.id = id;
    this.genericName = genericName;
    this.scientificName = scientificName;
    this.kingdom = kingdom;
    this.kingdomKey = kingdomKey;
    this.phylum = phylum;
    this.phylumKey = phylumKey;
    this.genus = genus;
    this.genusKey = genusKey;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return genericName;
    case 2: return scientificName;
    case 3: return kingdom;
    case 4: return kingdomKey;
    case 5: return phylum;
    case 6: return phylumKey;
    case 7: return genus;
    case 8: return genusKey;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: genericName = (java.lang.CharSequence)value$; break;
    case 2: scientificName = (java.lang.CharSequence)value$; break;
    case 3: kingdom = (java.lang.CharSequence)value$; break;
    case 4: kingdomKey = (java.lang.Integer)value$; break;
    case 5: phylum = (java.lang.CharSequence)value$; break;
    case 6: phylumKey = (java.lang.Integer)value$; break;
    case 7: genus = (java.lang.CharSequence)value$; break;
    case 8: genusKey = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * The record id   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The record id   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'genericName' field.
   */
  public java.lang.CharSequence getGenericName() {
    return genericName;
  }

  /**
   * Sets the value of the 'genericName' field.
   * @param value the value to set.
   */
  public void setGenericName(java.lang.CharSequence value) {
    this.genericName = value;
  }

  /**
   * Gets the value of the 'scientificName' field.
   */
  public java.lang.CharSequence getScientificName() {
    return scientificName;
  }

  /**
   * Sets the value of the 'scientificName' field.
   * @param value the value to set.
   */
  public void setScientificName(java.lang.CharSequence value) {
    this.scientificName = value;
  }

  /**
   * Gets the value of the 'kingdom' field.
   */
  public java.lang.CharSequence getKingdom() {
    return kingdom;
  }

  /**
   * Sets the value of the 'kingdom' field.
   * @param value the value to set.
   */
  public void setKingdom(java.lang.CharSequence value) {
    this.kingdom = value;
  }

  /**
   * Gets the value of the 'kingdomKey' field.
   */
  public java.lang.Integer getKingdomKey() {
    return kingdomKey;
  }

  /**
   * Sets the value of the 'kingdomKey' field.
   * @param value the value to set.
   */
  public void setKingdomKey(java.lang.Integer value) {
    this.kingdomKey = value;
  }

  /**
   * Gets the value of the 'phylum' field.
   */
  public java.lang.CharSequence getPhylum() {
    return phylum;
  }

  /**
   * Sets the value of the 'phylum' field.
   * @param value the value to set.
   */
  public void setPhylum(java.lang.CharSequence value) {
    this.phylum = value;
  }

  /**
   * Gets the value of the 'phylumKey' field.
   */
  public java.lang.Integer getPhylumKey() {
    return phylumKey;
  }

  /**
   * Sets the value of the 'phylumKey' field.
   * @param value the value to set.
   */
  public void setPhylumKey(java.lang.Integer value) {
    this.phylumKey = value;
  }

  /**
   * Gets the value of the 'genus' field.
   */
  public java.lang.CharSequence getGenus() {
    return genus;
  }

  /**
   * Sets the value of the 'genus' field.
   * @param value the value to set.
   */
  public void setGenus(java.lang.CharSequence value) {
    this.genus = value;
  }

  /**
   * Gets the value of the 'genusKey' field.
   */
  public java.lang.Integer getGenusKey() {
    return genusKey;
  }

  /**
   * Sets the value of the 'genusKey' field.
   * @param value the value to set.
   */
  public void setGenusKey(java.lang.Integer value) {
    this.genusKey = value;
  }

  /** Creates a new TaxonRecord RecordBuilder */
  public static org.gbif.pipelines.io.avro.TaxonRecord.Builder newBuilder() {
    return new org.gbif.pipelines.io.avro.TaxonRecord.Builder();
  }
  
  /** Creates a new TaxonRecord RecordBuilder by copying an existing Builder */
  public static org.gbif.pipelines.io.avro.TaxonRecord.Builder newBuilder(org.gbif.pipelines.io.avro.TaxonRecord.Builder other) {
    return new org.gbif.pipelines.io.avro.TaxonRecord.Builder(other);
  }
  
  /** Creates a new TaxonRecord RecordBuilder by copying an existing TaxonRecord instance */
  public static org.gbif.pipelines.io.avro.TaxonRecord.Builder newBuilder(org.gbif.pipelines.io.avro.TaxonRecord other) {
    return new org.gbif.pipelines.io.avro.TaxonRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for TaxonRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TaxonRecord>
    implements org.apache.avro.data.RecordBuilder<TaxonRecord> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence genericName;
    private java.lang.CharSequence scientificName;
    private java.lang.CharSequence kingdom;
    private java.lang.Integer kingdomKey;
    private java.lang.CharSequence phylum;
    private java.lang.Integer phylumKey;
    private java.lang.CharSequence genus;
    private java.lang.Integer genusKey;

    /** Creates a new Builder */
    private Builder() {
      super(org.gbif.pipelines.io.avro.TaxonRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gbif.pipelines.io.avro.TaxonRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.genericName)) {
        this.genericName = data().deepCopy(fields()[1].schema(), other.genericName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.scientificName)) {
        this.scientificName = data().deepCopy(fields()[2].schema(), other.scientificName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.kingdom)) {
        this.kingdom = data().deepCopy(fields()[3].schema(), other.kingdom);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.kingdomKey)) {
        this.kingdomKey = data().deepCopy(fields()[4].schema(), other.kingdomKey);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.phylum)) {
        this.phylum = data().deepCopy(fields()[5].schema(), other.phylum);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.phylumKey)) {
        this.phylumKey = data().deepCopy(fields()[6].schema(), other.phylumKey);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.genus)) {
        this.genus = data().deepCopy(fields()[7].schema(), other.genus);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.genusKey)) {
        this.genusKey = data().deepCopy(fields()[8].schema(), other.genusKey);
        fieldSetFlags()[8] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TaxonRecord instance */
    private Builder(org.gbif.pipelines.io.avro.TaxonRecord other) {
            super(org.gbif.pipelines.io.avro.TaxonRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.genericName)) {
        this.genericName = data().deepCopy(fields()[1].schema(), other.genericName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.scientificName)) {
        this.scientificName = data().deepCopy(fields()[2].schema(), other.scientificName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.kingdom)) {
        this.kingdom = data().deepCopy(fields()[3].schema(), other.kingdom);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.kingdomKey)) {
        this.kingdomKey = data().deepCopy(fields()[4].schema(), other.kingdomKey);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.phylum)) {
        this.phylum = data().deepCopy(fields()[5].schema(), other.phylum);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.phylumKey)) {
        this.phylumKey = data().deepCopy(fields()[6].schema(), other.phylumKey);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.genus)) {
        this.genus = data().deepCopy(fields()[7].schema(), other.genus);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.genusKey)) {
        this.genusKey = data().deepCopy(fields()[8].schema(), other.genusKey);
        fieldSetFlags()[8] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'genericName' field */
    public java.lang.CharSequence getGenericName() {
      return genericName;
    }
    
    /** Sets the value of the 'genericName' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setGenericName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.genericName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'genericName' field has been set */
    public boolean hasGenericName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'genericName' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearGenericName() {
      genericName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'scientificName' field */
    public java.lang.CharSequence getScientificName() {
      return scientificName;
    }
    
    /** Sets the value of the 'scientificName' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setScientificName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.scientificName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'scientificName' field has been set */
    public boolean hasScientificName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'scientificName' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearScientificName() {
      scientificName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'kingdom' field */
    public java.lang.CharSequence getKingdom() {
      return kingdom;
    }
    
    /** Sets the value of the 'kingdom' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setKingdom(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.kingdom = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'kingdom' field has been set */
    public boolean hasKingdom() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'kingdom' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearKingdom() {
      kingdom = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'kingdomKey' field */
    public java.lang.Integer getKingdomKey() {
      return kingdomKey;
    }
    
    /** Sets the value of the 'kingdomKey' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setKingdomKey(java.lang.Integer value) {
      validate(fields()[4], value);
      this.kingdomKey = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'kingdomKey' field has been set */
    public boolean hasKingdomKey() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'kingdomKey' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearKingdomKey() {
      kingdomKey = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'phylum' field */
    public java.lang.CharSequence getPhylum() {
      return phylum;
    }
    
    /** Sets the value of the 'phylum' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setPhylum(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.phylum = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'phylum' field has been set */
    public boolean hasPhylum() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'phylum' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearPhylum() {
      phylum = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'phylumKey' field */
    public java.lang.Integer getPhylumKey() {
      return phylumKey;
    }
    
    /** Sets the value of the 'phylumKey' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setPhylumKey(java.lang.Integer value) {
      validate(fields()[6], value);
      this.phylumKey = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'phylumKey' field has been set */
    public boolean hasPhylumKey() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'phylumKey' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearPhylumKey() {
      phylumKey = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'genus' field */
    public java.lang.CharSequence getGenus() {
      return genus;
    }
    
    /** Sets the value of the 'genus' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setGenus(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.genus = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'genus' field has been set */
    public boolean hasGenus() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'genus' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearGenus() {
      genus = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'genusKey' field */
    public java.lang.Integer getGenusKey() {
      return genusKey;
    }
    
    /** Sets the value of the 'genusKey' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setGenusKey(java.lang.Integer value) {
      validate(fields()[8], value);
      this.genusKey = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'genusKey' field has been set */
    public boolean hasGenusKey() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'genusKey' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearGenusKey() {
      genusKey = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public TaxonRecord build() {
      try {
        TaxonRecord record = new TaxonRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.genericName = fieldSetFlags()[1] ? this.genericName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.scientificName = fieldSetFlags()[2] ? this.scientificName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.kingdom = fieldSetFlags()[3] ? this.kingdom : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.kingdomKey = fieldSetFlags()[4] ? this.kingdomKey : (java.lang.Integer) defaultValue(fields()[4]);
        record.phylum = fieldSetFlags()[5] ? this.phylum : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.phylumKey = fieldSetFlags()[6] ? this.phylumKey : (java.lang.Integer) defaultValue(fields()[6]);
        record.genus = fieldSetFlags()[7] ? this.genus : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.genusKey = fieldSetFlags()[8] ? this.genusKey : (java.lang.Integer) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
