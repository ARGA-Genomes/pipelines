/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gbif.pipelines.io.avro;  
@SuppressWarnings("all")
/** A container for taxon DarwinCore terms been interpreted. */
@org.apache.avro.specific.AvroGenerated
public class TaxonRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TaxonRecord\",\"namespace\":\"org.gbif.pipelines.io.avro\",\"doc\":\"A container for taxon DarwinCore terms been interpreted.\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The record id\"},{\"name\":\"scientificName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"kingdom\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"kingdomKey\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The record id */
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence scientificName;
  @Deprecated public java.lang.CharSequence kingdom;
  @Deprecated public java.lang.Integer kingdomKey;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TaxonRecord() {}

  /**
   * All-args constructor.
   */
  public TaxonRecord(java.lang.CharSequence id, java.lang.CharSequence scientificName, java.lang.CharSequence kingdom, java.lang.Integer kingdomKey) {
    this.id = id;
    this.scientificName = scientificName;
    this.kingdom = kingdom;
    this.kingdomKey = kingdomKey;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return scientificName;
    case 2: return kingdom;
    case 3: return kingdomKey;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: scientificName = (java.lang.CharSequence)value$; break;
    case 2: kingdom = (java.lang.CharSequence)value$; break;
    case 3: kingdomKey = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * The record id   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The record id   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'scientificName' field.
   */
  public java.lang.CharSequence getScientificName() {
    return scientificName;
  }

  /**
   * Sets the value of the 'scientificName' field.
   * @param value the value to set.
   */
  public void setScientificName(java.lang.CharSequence value) {
    this.scientificName = value;
  }

  /**
   * Gets the value of the 'kingdom' field.
   */
  public java.lang.CharSequence getKingdom() {
    return kingdom;
  }

  /**
   * Sets the value of the 'kingdom' field.
   * @param value the value to set.
   */
  public void setKingdom(java.lang.CharSequence value) {
    this.kingdom = value;
  }

  /**
   * Gets the value of the 'kingdomKey' field.
   */
  public java.lang.Integer getKingdomKey() {
    return kingdomKey;
  }

  /**
   * Sets the value of the 'kingdomKey' field.
   * @param value the value to set.
   */
  public void setKingdomKey(java.lang.Integer value) {
    this.kingdomKey = value;
  }

  /** Creates a new TaxonRecord RecordBuilder */
  public static org.gbif.pipelines.io.avro.TaxonRecord.Builder newBuilder() {
    return new org.gbif.pipelines.io.avro.TaxonRecord.Builder();
  }
  
  /** Creates a new TaxonRecord RecordBuilder by copying an existing Builder */
  public static org.gbif.pipelines.io.avro.TaxonRecord.Builder newBuilder(org.gbif.pipelines.io.avro.TaxonRecord.Builder other) {
    return new org.gbif.pipelines.io.avro.TaxonRecord.Builder(other);
  }
  
  /** Creates a new TaxonRecord RecordBuilder by copying an existing TaxonRecord instance */
  public static org.gbif.pipelines.io.avro.TaxonRecord.Builder newBuilder(org.gbif.pipelines.io.avro.TaxonRecord other) {
    return new org.gbif.pipelines.io.avro.TaxonRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for TaxonRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TaxonRecord>
    implements org.apache.avro.data.RecordBuilder<TaxonRecord> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence scientificName;
    private java.lang.CharSequence kingdom;
    private java.lang.Integer kingdomKey;

    /** Creates a new Builder */
    private Builder() {
      super(org.gbif.pipelines.io.avro.TaxonRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gbif.pipelines.io.avro.TaxonRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.scientificName)) {
        this.scientificName = data().deepCopy(fields()[1].schema(), other.scientificName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.kingdom)) {
        this.kingdom = data().deepCopy(fields()[2].schema(), other.kingdom);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.kingdomKey)) {
        this.kingdomKey = data().deepCopy(fields()[3].schema(), other.kingdomKey);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TaxonRecord instance */
    private Builder(org.gbif.pipelines.io.avro.TaxonRecord other) {
            super(org.gbif.pipelines.io.avro.TaxonRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.scientificName)) {
        this.scientificName = data().deepCopy(fields()[1].schema(), other.scientificName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.kingdom)) {
        this.kingdom = data().deepCopy(fields()[2].schema(), other.kingdom);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.kingdomKey)) {
        this.kingdomKey = data().deepCopy(fields()[3].schema(), other.kingdomKey);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'scientificName' field */
    public java.lang.CharSequence getScientificName() {
      return scientificName;
    }
    
    /** Sets the value of the 'scientificName' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setScientificName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.scientificName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'scientificName' field has been set */
    public boolean hasScientificName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'scientificName' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearScientificName() {
      scientificName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'kingdom' field */
    public java.lang.CharSequence getKingdom() {
      return kingdom;
    }
    
    /** Sets the value of the 'kingdom' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setKingdom(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.kingdom = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'kingdom' field has been set */
    public boolean hasKingdom() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'kingdom' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearKingdom() {
      kingdom = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'kingdomKey' field */
    public java.lang.Integer getKingdomKey() {
      return kingdomKey;
    }
    
    /** Sets the value of the 'kingdomKey' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setKingdomKey(java.lang.Integer value) {
      validate(fields()[3], value);
      this.kingdomKey = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'kingdomKey' field has been set */
    public boolean hasKingdomKey() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'kingdomKey' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearKingdomKey() {
      kingdomKey = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public TaxonRecord build() {
      try {
        TaxonRecord record = new TaxonRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.scientificName = fieldSetFlags()[1] ? this.scientificName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.kingdom = fieldSetFlags()[2] ? this.kingdom : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.kingdomKey = fieldSetFlags()[3] ? this.kingdomKey : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
