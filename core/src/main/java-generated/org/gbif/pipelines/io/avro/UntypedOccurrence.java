/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gbif.pipelines.io.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UntypedOccurrence extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UntypedOccurrence\",\"namespace\":\"org.gbif.pipelines.io.avro\",\"fields\":[{\"name\":\"occurrenceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"kingdom\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"phylum\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"class\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"order\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"family\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"genus\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"species\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"specificEpithet\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"infraspecificEpithet\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"taxonRank\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"scientificName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"scientificNameAuthorship\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"basisOfRecord\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"decimallatitude\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"decimallongitude\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"geodeticDatum\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"eventDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"year\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"month\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"day\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String occurrenceId;
  @Deprecated public java.lang.String kingdom;
  @Deprecated public java.lang.String phylum;
  @Deprecated public java.lang.String class$;
  @Deprecated public java.lang.String order;
  @Deprecated public java.lang.String family;
  @Deprecated public java.lang.String genus;
  @Deprecated public java.lang.String species;
  @Deprecated public java.lang.String specificEpithet;
  @Deprecated public java.lang.String infraspecificEpithet;
  @Deprecated public java.lang.String taxonRank;
  @Deprecated public java.lang.String scientificName;
  @Deprecated public java.lang.String scientificNameAuthorship;
  @Deprecated public java.lang.String basisOfRecord;
  @Deprecated public java.lang.String decimallatitude;
  @Deprecated public java.lang.String decimallongitude;
  @Deprecated public java.lang.String geodeticDatum;
  @Deprecated public java.lang.String country;
  @Deprecated public java.lang.String eventDate;
  @Deprecated public java.lang.String year;
  @Deprecated public java.lang.String month;
  @Deprecated public java.lang.String day;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public UntypedOccurrence() {}

  /**
   * All-args constructor.
   */
  public UntypedOccurrence(java.lang.String occurrenceId, java.lang.String kingdom, java.lang.String phylum, java.lang.String class$, java.lang.String order, java.lang.String family, java.lang.String genus, java.lang.String species, java.lang.String specificEpithet, java.lang.String infraspecificEpithet, java.lang.String taxonRank, java.lang.String scientificName, java.lang.String scientificNameAuthorship, java.lang.String basisOfRecord, java.lang.String decimallatitude, java.lang.String decimallongitude, java.lang.String geodeticDatum, java.lang.String country, java.lang.String eventDate, java.lang.String year, java.lang.String month, java.lang.String day) {
    this.occurrenceId = occurrenceId;
    this.kingdom = kingdom;
    this.phylum = phylum;
    this.class$ = class$;
    this.order = order;
    this.family = family;
    this.genus = genus;
    this.species = species;
    this.specificEpithet = specificEpithet;
    this.infraspecificEpithet = infraspecificEpithet;
    this.taxonRank = taxonRank;
    this.scientificName = scientificName;
    this.scientificNameAuthorship = scientificNameAuthorship;
    this.basisOfRecord = basisOfRecord;
    this.decimallatitude = decimallatitude;
    this.decimallongitude = decimallongitude;
    this.geodeticDatum = geodeticDatum;
    this.country = country;
    this.eventDate = eventDate;
    this.year = year;
    this.month = month;
    this.day = day;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return occurrenceId;
    case 1: return kingdom;
    case 2: return phylum;
    case 3: return class$;
    case 4: return order;
    case 5: return family;
    case 6: return genus;
    case 7: return species;
    case 8: return specificEpithet;
    case 9: return infraspecificEpithet;
    case 10: return taxonRank;
    case 11: return scientificName;
    case 12: return scientificNameAuthorship;
    case 13: return basisOfRecord;
    case 14: return decimallatitude;
    case 15: return decimallongitude;
    case 16: return geodeticDatum;
    case 17: return country;
    case 18: return eventDate;
    case 19: return year;
    case 20: return month;
    case 21: return day;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: occurrenceId = (java.lang.String)value$; break;
    case 1: kingdom = (java.lang.String)value$; break;
    case 2: phylum = (java.lang.String)value$; break;
    case 3: class$ = (java.lang.String)value$; break;
    case 4: order = (java.lang.String)value$; break;
    case 5: family = (java.lang.String)value$; break;
    case 6: genus = (java.lang.String)value$; break;
    case 7: species = (java.lang.String)value$; break;
    case 8: specificEpithet = (java.lang.String)value$; break;
    case 9: infraspecificEpithet = (java.lang.String)value$; break;
    case 10: taxonRank = (java.lang.String)value$; break;
    case 11: scientificName = (java.lang.String)value$; break;
    case 12: scientificNameAuthorship = (java.lang.String)value$; break;
    case 13: basisOfRecord = (java.lang.String)value$; break;
    case 14: decimallatitude = (java.lang.String)value$; break;
    case 15: decimallongitude = (java.lang.String)value$; break;
    case 16: geodeticDatum = (java.lang.String)value$; break;
    case 17: country = (java.lang.String)value$; break;
    case 18: eventDate = (java.lang.String)value$; break;
    case 19: year = (java.lang.String)value$; break;
    case 20: month = (java.lang.String)value$; break;
    case 21: day = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'occurrenceId' field.
   */
  public java.lang.String getOccurrenceId() {
    return occurrenceId;
  }

  /**
   * Sets the value of the 'occurrenceId' field.
   * @param value the value to set.
   */
  public void setOccurrenceId(java.lang.String value) {
    this.occurrenceId = value;
  }

  /**
   * Gets the value of the 'kingdom' field.
   */
  public java.lang.String getKingdom() {
    return kingdom;
  }

  /**
   * Sets the value of the 'kingdom' field.
   * @param value the value to set.
   */
  public void setKingdom(java.lang.String value) {
    this.kingdom = value;
  }

  /**
   * Gets the value of the 'phylum' field.
   */
  public java.lang.String getPhylum() {
    return phylum;
  }

  /**
   * Sets the value of the 'phylum' field.
   * @param value the value to set.
   */
  public void setPhylum(java.lang.String value) {
    this.phylum = value;
  }

  /**
   * Gets the value of the 'class$' field.
   */
  public java.lang.String getClass$() {
    return class$;
  }

  /**
   * Sets the value of the 'class$' field.
   * @param value the value to set.
   */
  public void setClass$(java.lang.String value) {
    this.class$ = value;
  }

  /**
   * Gets the value of the 'order' field.
   */
  public java.lang.String getOrder() {
    return order;
  }

  /**
   * Sets the value of the 'order' field.
   * @param value the value to set.
   */
  public void setOrder(java.lang.String value) {
    this.order = value;
  }

  /**
   * Gets the value of the 'family' field.
   */
  public java.lang.String getFamily() {
    return family;
  }

  /**
   * Sets the value of the 'family' field.
   * @param value the value to set.
   */
  public void setFamily(java.lang.String value) {
    this.family = value;
  }

  /**
   * Gets the value of the 'genus' field.
   */
  public java.lang.String getGenus() {
    return genus;
  }

  /**
   * Sets the value of the 'genus' field.
   * @param value the value to set.
   */
  public void setGenus(java.lang.String value) {
    this.genus = value;
  }

  /**
   * Gets the value of the 'species' field.
   */
  public java.lang.String getSpecies() {
    return species;
  }

  /**
   * Sets the value of the 'species' field.
   * @param value the value to set.
   */
  public void setSpecies(java.lang.String value) {
    this.species = value;
  }

  /**
   * Gets the value of the 'specificEpithet' field.
   */
  public java.lang.String getSpecificEpithet() {
    return specificEpithet;
  }

  /**
   * Sets the value of the 'specificEpithet' field.
   * @param value the value to set.
   */
  public void setSpecificEpithet(java.lang.String value) {
    this.specificEpithet = value;
  }

  /**
   * Gets the value of the 'infraspecificEpithet' field.
   */
  public java.lang.String getInfraspecificEpithet() {
    return infraspecificEpithet;
  }

  /**
   * Sets the value of the 'infraspecificEpithet' field.
   * @param value the value to set.
   */
  public void setInfraspecificEpithet(java.lang.String value) {
    this.infraspecificEpithet = value;
  }

  /**
   * Gets the value of the 'taxonRank' field.
   */
  public java.lang.String getTaxonRank() {
    return taxonRank;
  }

  /**
   * Sets the value of the 'taxonRank' field.
   * @param value the value to set.
   */
  public void setTaxonRank(java.lang.String value) {
    this.taxonRank = value;
  }

  /**
   * Gets the value of the 'scientificName' field.
   */
  public java.lang.String getScientificName() {
    return scientificName;
  }

  /**
   * Sets the value of the 'scientificName' field.
   * @param value the value to set.
   */
  public void setScientificName(java.lang.String value) {
    this.scientificName = value;
  }

  /**
   * Gets the value of the 'scientificNameAuthorship' field.
   */
  public java.lang.String getScientificNameAuthorship() {
    return scientificNameAuthorship;
  }

  /**
   * Sets the value of the 'scientificNameAuthorship' field.
   * @param value the value to set.
   */
  public void setScientificNameAuthorship(java.lang.String value) {
    this.scientificNameAuthorship = value;
  }

  /**
   * Gets the value of the 'basisOfRecord' field.
   */
  public java.lang.String getBasisOfRecord() {
    return basisOfRecord;
  }

  /**
   * Sets the value of the 'basisOfRecord' field.
   * @param value the value to set.
   */
  public void setBasisOfRecord(java.lang.String value) {
    this.basisOfRecord = value;
  }

  /**
   * Gets the value of the 'decimallatitude' field.
   */
  public java.lang.String getDecimallatitude() {
    return decimallatitude;
  }

  /**
   * Sets the value of the 'decimallatitude' field.
   * @param value the value to set.
   */
  public void setDecimallatitude(java.lang.String value) {
    this.decimallatitude = value;
  }

  /**
   * Gets the value of the 'decimallongitude' field.
   */
  public java.lang.String getDecimallongitude() {
    return decimallongitude;
  }

  /**
   * Sets the value of the 'decimallongitude' field.
   * @param value the value to set.
   */
  public void setDecimallongitude(java.lang.String value) {
    this.decimallongitude = value;
  }

  /**
   * Gets the value of the 'geodeticDatum' field.
   */
  public java.lang.String getGeodeticDatum() {
    return geodeticDatum;
  }

  /**
   * Sets the value of the 'geodeticDatum' field.
   * @param value the value to set.
   */
  public void setGeodeticDatum(java.lang.String value) {
    this.geodeticDatum = value;
  }

  /**
   * Gets the value of the 'country' field.
   */
  public java.lang.String getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.String value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'eventDate' field.
   */
  public java.lang.String getEventDate() {
    return eventDate;
  }

  /**
   * Sets the value of the 'eventDate' field.
   * @param value the value to set.
   */
  public void setEventDate(java.lang.String value) {
    this.eventDate = value;
  }

  /**
   * Gets the value of the 'year' field.
   */
  public java.lang.String getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.String value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'month' field.
   */
  public java.lang.String getMonth() {
    return month;
  }

  /**
   * Sets the value of the 'month' field.
   * @param value the value to set.
   */
  public void setMonth(java.lang.String value) {
    this.month = value;
  }

  /**
   * Gets the value of the 'day' field.
   */
  public java.lang.String getDay() {
    return day;
  }

  /**
   * Sets the value of the 'day' field.
   * @param value the value to set.
   */
  public void setDay(java.lang.String value) {
    this.day = value;
  }

  /** Creates a new UntypedOccurrence RecordBuilder */
  public static org.gbif.pipelines.io.avro.UntypedOccurrence.Builder newBuilder() {
    return new org.gbif.pipelines.io.avro.UntypedOccurrence.Builder();
  }
  
  /** Creates a new UntypedOccurrence RecordBuilder by copying an existing Builder */
  public static org.gbif.pipelines.io.avro.UntypedOccurrence.Builder newBuilder(org.gbif.pipelines.io.avro.UntypedOccurrence.Builder other) {
    return new org.gbif.pipelines.io.avro.UntypedOccurrence.Builder(other);
  }
  
  /** Creates a new UntypedOccurrence RecordBuilder by copying an existing UntypedOccurrence instance */
  public static org.gbif.pipelines.io.avro.UntypedOccurrence.Builder newBuilder(org.gbif.pipelines.io.avro.UntypedOccurrence other) {
    return new org.gbif.pipelines.io.avro.UntypedOccurrence.Builder(other);
  }
  
  /**
   * RecordBuilder for UntypedOccurrence instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UntypedOccurrence>
    implements org.apache.avro.data.RecordBuilder<UntypedOccurrence> {

    private java.lang.String occurrenceId;
    private java.lang.String kingdom;
    private java.lang.String phylum;
    private java.lang.String class$;
    private java.lang.String order;
    private java.lang.String family;
    private java.lang.String genus;
    private java.lang.String species;
    private java.lang.String specificEpithet;
    private java.lang.String infraspecificEpithet;
    private java.lang.String taxonRank;
    private java.lang.String scientificName;
    private java.lang.String scientificNameAuthorship;
    private java.lang.String basisOfRecord;
    private java.lang.String decimallatitude;
    private java.lang.String decimallongitude;
    private java.lang.String geodeticDatum;
    private java.lang.String country;
    private java.lang.String eventDate;
    private java.lang.String year;
    private java.lang.String month;
    private java.lang.String day;

    /** Creates a new Builder */
    private Builder() {
      super(org.gbif.pipelines.io.avro.UntypedOccurrence.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gbif.pipelines.io.avro.UntypedOccurrence.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.occurrenceId)) {
        this.occurrenceId = data().deepCopy(fields()[0].schema(), other.occurrenceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.kingdom)) {
        this.kingdom = data().deepCopy(fields()[1].schema(), other.kingdom);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phylum)) {
        this.phylum = data().deepCopy(fields()[2].schema(), other.phylum);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.class$)) {
        this.class$ = data().deepCopy(fields()[3].schema(), other.class$);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.order)) {
        this.order = data().deepCopy(fields()[4].schema(), other.order);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.family)) {
        this.family = data().deepCopy(fields()[5].schema(), other.family);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.genus)) {
        this.genus = data().deepCopy(fields()[6].schema(), other.genus);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.species)) {
        this.species = data().deepCopy(fields()[7].schema(), other.species);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.specificEpithet)) {
        this.specificEpithet = data().deepCopy(fields()[8].schema(), other.specificEpithet);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.infraspecificEpithet)) {
        this.infraspecificEpithet = data().deepCopy(fields()[9].schema(), other.infraspecificEpithet);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.taxonRank)) {
        this.taxonRank = data().deepCopy(fields()[10].schema(), other.taxonRank);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.scientificName)) {
        this.scientificName = data().deepCopy(fields()[11].schema(), other.scientificName);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.scientificNameAuthorship)) {
        this.scientificNameAuthorship = data().deepCopy(fields()[12].schema(), other.scientificNameAuthorship);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.basisOfRecord)) {
        this.basisOfRecord = data().deepCopy(fields()[13].schema(), other.basisOfRecord);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.decimallatitude)) {
        this.decimallatitude = data().deepCopy(fields()[14].schema(), other.decimallatitude);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.decimallongitude)) {
        this.decimallongitude = data().deepCopy(fields()[15].schema(), other.decimallongitude);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.geodeticDatum)) {
        this.geodeticDatum = data().deepCopy(fields()[16].schema(), other.geodeticDatum);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.country)) {
        this.country = data().deepCopy(fields()[17].schema(), other.country);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.eventDate)) {
        this.eventDate = data().deepCopy(fields()[18].schema(), other.eventDate);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.year)) {
        this.year = data().deepCopy(fields()[19].schema(), other.year);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.month)) {
        this.month = data().deepCopy(fields()[20].schema(), other.month);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.day)) {
        this.day = data().deepCopy(fields()[21].schema(), other.day);
        fieldSetFlags()[21] = true;
      }
    }
    
    /** Creates a Builder by copying an existing UntypedOccurrence instance */
    private Builder(org.gbif.pipelines.io.avro.UntypedOccurrence other) {
            super(org.gbif.pipelines.io.avro.UntypedOccurrence.SCHEMA$);
      if (isValidValue(fields()[0], other.occurrenceId)) {
        this.occurrenceId = data().deepCopy(fields()[0].schema(), other.occurrenceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.kingdom)) {
        this.kingdom = data().deepCopy(fields()[1].schema(), other.kingdom);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phylum)) {
        this.phylum = data().deepCopy(fields()[2].schema(), other.phylum);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.class$)) {
        this.class$ = data().deepCopy(fields()[3].schema(), other.class$);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.order)) {
        this.order = data().deepCopy(fields()[4].schema(), other.order);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.family)) {
        this.family = data().deepCopy(fields()[5].schema(), other.family);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.genus)) {
        this.genus = data().deepCopy(fields()[6].schema(), other.genus);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.species)) {
        this.species = data().deepCopy(fields()[7].schema(), other.species);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.specificEpithet)) {
        this.specificEpithet = data().deepCopy(fields()[8].schema(), other.specificEpithet);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.infraspecificEpithet)) {
        this.infraspecificEpithet = data().deepCopy(fields()[9].schema(), other.infraspecificEpithet);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.taxonRank)) {
        this.taxonRank = data().deepCopy(fields()[10].schema(), other.taxonRank);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.scientificName)) {
        this.scientificName = data().deepCopy(fields()[11].schema(), other.scientificName);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.scientificNameAuthorship)) {
        this.scientificNameAuthorship = data().deepCopy(fields()[12].schema(), other.scientificNameAuthorship);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.basisOfRecord)) {
        this.basisOfRecord = data().deepCopy(fields()[13].schema(), other.basisOfRecord);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.decimallatitude)) {
        this.decimallatitude = data().deepCopy(fields()[14].schema(), other.decimallatitude);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.decimallongitude)) {
        this.decimallongitude = data().deepCopy(fields()[15].schema(), other.decimallongitude);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.geodeticDatum)) {
        this.geodeticDatum = data().deepCopy(fields()[16].schema(), other.geodeticDatum);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.country)) {
        this.country = data().deepCopy(fields()[17].schema(), other.country);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.eventDate)) {
        this.eventDate = data().deepCopy(fields()[18].schema(), other.eventDate);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.year)) {
        this.year = data().deepCopy(fields()[19].schema(), other.year);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.month)) {
        this.month = data().deepCopy(fields()[20].schema(), other.month);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.day)) {
        this.day = data().deepCopy(fields()[21].schema(), other.day);
        fieldSetFlags()[21] = true;
      }
    }

    /** Gets the value of the 'occurrenceId' field */
    public java.lang.String getOccurrenceId() {
      return occurrenceId;
    }
    
    /** Sets the value of the 'occurrenceId' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setOccurrenceId(java.lang.String value) {
      validate(fields()[0], value);
      this.occurrenceId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'occurrenceId' field has been set */
    public boolean hasOccurrenceId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'occurrenceId' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearOccurrenceId() {
      occurrenceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'kingdom' field */
    public java.lang.String getKingdom() {
      return kingdom;
    }
    
    /** Sets the value of the 'kingdom' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setKingdom(java.lang.String value) {
      validate(fields()[1], value);
      this.kingdom = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'kingdom' field has been set */
    public boolean hasKingdom() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'kingdom' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearKingdom() {
      kingdom = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'phylum' field */
    public java.lang.String getPhylum() {
      return phylum;
    }
    
    /** Sets the value of the 'phylum' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setPhylum(java.lang.String value) {
      validate(fields()[2], value);
      this.phylum = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'phylum' field has been set */
    public boolean hasPhylum() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'phylum' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearPhylum() {
      phylum = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'class$' field */
    public java.lang.String getClass$() {
      return class$;
    }
    
    /** Sets the value of the 'class$' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setClass$(java.lang.String value) {
      validate(fields()[3], value);
      this.class$ = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'class$' field has been set */
    public boolean hasClass$() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'class$' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearClass$() {
      class$ = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'order' field */
    public java.lang.String getOrder() {
      return order;
    }
    
    /** Sets the value of the 'order' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setOrder(java.lang.String value) {
      validate(fields()[4], value);
      this.order = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'order' field has been set */
    public boolean hasOrder() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'order' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearOrder() {
      order = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'family' field */
    public java.lang.String getFamily() {
      return family;
    }
    
    /** Sets the value of the 'family' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setFamily(java.lang.String value) {
      validate(fields()[5], value);
      this.family = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'family' field has been set */
    public boolean hasFamily() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'family' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearFamily() {
      family = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'genus' field */
    public java.lang.String getGenus() {
      return genus;
    }
    
    /** Sets the value of the 'genus' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setGenus(java.lang.String value) {
      validate(fields()[6], value);
      this.genus = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'genus' field has been set */
    public boolean hasGenus() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'genus' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearGenus() {
      genus = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'species' field */
    public java.lang.String getSpecies() {
      return species;
    }
    
    /** Sets the value of the 'species' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setSpecies(java.lang.String value) {
      validate(fields()[7], value);
      this.species = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'species' field has been set */
    public boolean hasSpecies() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'species' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearSpecies() {
      species = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'specificEpithet' field */
    public java.lang.String getSpecificEpithet() {
      return specificEpithet;
    }
    
    /** Sets the value of the 'specificEpithet' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setSpecificEpithet(java.lang.String value) {
      validate(fields()[8], value);
      this.specificEpithet = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'specificEpithet' field has been set */
    public boolean hasSpecificEpithet() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'specificEpithet' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearSpecificEpithet() {
      specificEpithet = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'infraspecificEpithet' field */
    public java.lang.String getInfraspecificEpithet() {
      return infraspecificEpithet;
    }
    
    /** Sets the value of the 'infraspecificEpithet' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setInfraspecificEpithet(java.lang.String value) {
      validate(fields()[9], value);
      this.infraspecificEpithet = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'infraspecificEpithet' field has been set */
    public boolean hasInfraspecificEpithet() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'infraspecificEpithet' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearInfraspecificEpithet() {
      infraspecificEpithet = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'taxonRank' field */
    public java.lang.String getTaxonRank() {
      return taxonRank;
    }
    
    /** Sets the value of the 'taxonRank' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setTaxonRank(java.lang.String value) {
      validate(fields()[10], value);
      this.taxonRank = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'taxonRank' field has been set */
    public boolean hasTaxonRank() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'taxonRank' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearTaxonRank() {
      taxonRank = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'scientificName' field */
    public java.lang.String getScientificName() {
      return scientificName;
    }
    
    /** Sets the value of the 'scientificName' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setScientificName(java.lang.String value) {
      validate(fields()[11], value);
      this.scientificName = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'scientificName' field has been set */
    public boolean hasScientificName() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'scientificName' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearScientificName() {
      scientificName = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'scientificNameAuthorship' field */
    public java.lang.String getScientificNameAuthorship() {
      return scientificNameAuthorship;
    }
    
    /** Sets the value of the 'scientificNameAuthorship' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setScientificNameAuthorship(java.lang.String value) {
      validate(fields()[12], value);
      this.scientificNameAuthorship = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'scientificNameAuthorship' field has been set */
    public boolean hasScientificNameAuthorship() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'scientificNameAuthorship' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearScientificNameAuthorship() {
      scientificNameAuthorship = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'basisOfRecord' field */
    public java.lang.String getBasisOfRecord() {
      return basisOfRecord;
    }
    
    /** Sets the value of the 'basisOfRecord' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setBasisOfRecord(java.lang.String value) {
      validate(fields()[13], value);
      this.basisOfRecord = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'basisOfRecord' field has been set */
    public boolean hasBasisOfRecord() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'basisOfRecord' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearBasisOfRecord() {
      basisOfRecord = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'decimallatitude' field */
    public java.lang.String getDecimallatitude() {
      return decimallatitude;
    }
    
    /** Sets the value of the 'decimallatitude' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setDecimallatitude(java.lang.String value) {
      validate(fields()[14], value);
      this.decimallatitude = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'decimallatitude' field has been set */
    public boolean hasDecimallatitude() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'decimallatitude' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearDecimallatitude() {
      decimallatitude = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'decimallongitude' field */
    public java.lang.String getDecimallongitude() {
      return decimallongitude;
    }
    
    /** Sets the value of the 'decimallongitude' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setDecimallongitude(java.lang.String value) {
      validate(fields()[15], value);
      this.decimallongitude = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'decimallongitude' field has been set */
    public boolean hasDecimallongitude() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'decimallongitude' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearDecimallongitude() {
      decimallongitude = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'geodeticDatum' field */
    public java.lang.String getGeodeticDatum() {
      return geodeticDatum;
    }
    
    /** Sets the value of the 'geodeticDatum' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setGeodeticDatum(java.lang.String value) {
      validate(fields()[16], value);
      this.geodeticDatum = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'geodeticDatum' field has been set */
    public boolean hasGeodeticDatum() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'geodeticDatum' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearGeodeticDatum() {
      geodeticDatum = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'country' field */
    public java.lang.String getCountry() {
      return country;
    }
    
    /** Sets the value of the 'country' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setCountry(java.lang.String value) {
      validate(fields()[17], value);
      this.country = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'country' field has been set */
    public boolean hasCountry() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'country' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearCountry() {
      country = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'eventDate' field */
    public java.lang.String getEventDate() {
      return eventDate;
    }
    
    /** Sets the value of the 'eventDate' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setEventDate(java.lang.String value) {
      validate(fields()[18], value);
      this.eventDate = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'eventDate' field has been set */
    public boolean hasEventDate() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'eventDate' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearEventDate() {
      eventDate = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'year' field */
    public java.lang.String getYear() {
      return year;
    }
    
    /** Sets the value of the 'year' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setYear(java.lang.String value) {
      validate(fields()[19], value);
      this.year = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'year' field has been set */
    public boolean hasYear() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'year' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearYear() {
      year = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'month' field */
    public java.lang.String getMonth() {
      return month;
    }
    
    /** Sets the value of the 'month' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setMonth(java.lang.String value) {
      validate(fields()[20], value);
      this.month = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'month' field has been set */
    public boolean hasMonth() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'month' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearMonth() {
      month = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /** Gets the value of the 'day' field */
    public java.lang.String getDay() {
      return day;
    }
    
    /** Sets the value of the 'day' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder setDay(java.lang.String value) {
      validate(fields()[21], value);
      this.day = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'day' field has been set */
    public boolean hasDay() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'day' field */
    public org.gbif.pipelines.io.avro.UntypedOccurrence.Builder clearDay() {
      day = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    @Override
    public UntypedOccurrence build() {
      try {
        UntypedOccurrence record = new UntypedOccurrence();
        record.occurrenceId = fieldSetFlags()[0] ? this.occurrenceId : (java.lang.String) defaultValue(fields()[0]);
        record.kingdom = fieldSetFlags()[1] ? this.kingdom : (java.lang.String) defaultValue(fields()[1]);
        record.phylum = fieldSetFlags()[2] ? this.phylum : (java.lang.String) defaultValue(fields()[2]);
        record.class$ = fieldSetFlags()[3] ? this.class$ : (java.lang.String) defaultValue(fields()[3]);
        record.order = fieldSetFlags()[4] ? this.order : (java.lang.String) defaultValue(fields()[4]);
        record.family = fieldSetFlags()[5] ? this.family : (java.lang.String) defaultValue(fields()[5]);
        record.genus = fieldSetFlags()[6] ? this.genus : (java.lang.String) defaultValue(fields()[6]);
        record.species = fieldSetFlags()[7] ? this.species : (java.lang.String) defaultValue(fields()[7]);
        record.specificEpithet = fieldSetFlags()[8] ? this.specificEpithet : (java.lang.String) defaultValue(fields()[8]);
        record.infraspecificEpithet = fieldSetFlags()[9] ? this.infraspecificEpithet : (java.lang.String) defaultValue(fields()[9]);
        record.taxonRank = fieldSetFlags()[10] ? this.taxonRank : (java.lang.String) defaultValue(fields()[10]);
        record.scientificName = fieldSetFlags()[11] ? this.scientificName : (java.lang.String) defaultValue(fields()[11]);
        record.scientificNameAuthorship = fieldSetFlags()[12] ? this.scientificNameAuthorship : (java.lang.String) defaultValue(fields()[12]);
        record.basisOfRecord = fieldSetFlags()[13] ? this.basisOfRecord : (java.lang.String) defaultValue(fields()[13]);
        record.decimallatitude = fieldSetFlags()[14] ? this.decimallatitude : (java.lang.String) defaultValue(fields()[14]);
        record.decimallongitude = fieldSetFlags()[15] ? this.decimallongitude : (java.lang.String) defaultValue(fields()[15]);
        record.geodeticDatum = fieldSetFlags()[16] ? this.geodeticDatum : (java.lang.String) defaultValue(fields()[16]);
        record.country = fieldSetFlags()[17] ? this.country : (java.lang.String) defaultValue(fields()[17]);
        record.eventDate = fieldSetFlags()[18] ? this.eventDate : (java.lang.String) defaultValue(fields()[18]);
        record.year = fieldSetFlags()[19] ? this.year : (java.lang.String) defaultValue(fields()[19]);
        record.month = fieldSetFlags()[20] ? this.month : (java.lang.String) defaultValue(fields()[20]);
        record.day = fieldSetFlags()[21] ? this.day : (java.lang.String) defaultValue(fields()[21]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
