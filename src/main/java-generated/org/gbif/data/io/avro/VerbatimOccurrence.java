/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gbif.data.io.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VerbatimOccurrence extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VerbatimOccurrence\",\"namespace\":\"org.gbif.data.io.avro\",\"fields\":[{\"name\":\"occurrenceId\",\"type\":\"string\"},{\"name\":\"scientificName\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence occurrenceId;
  @Deprecated public java.lang.CharSequence scientificName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public VerbatimOccurrence() {}

  /**
   * All-args constructor.
   */
  public VerbatimOccurrence(java.lang.CharSequence occurrenceId, java.lang.CharSequence scientificName) {
    this.occurrenceId = occurrenceId;
    this.scientificName = scientificName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return occurrenceId;
    case 1: return scientificName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: occurrenceId = (java.lang.CharSequence)value$; break;
    case 1: scientificName = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'occurrenceId' field.
   */
  public java.lang.CharSequence getOccurrenceId() {
    return occurrenceId;
  }

  /**
   * Sets the value of the 'occurrenceId' field.
   * @param value the value to set.
   */
  public void setOccurrenceId(java.lang.CharSequence value) {
    this.occurrenceId = value;
  }

  /**
   * Gets the value of the 'scientificName' field.
   */
  public java.lang.CharSequence getScientificName() {
    return scientificName;
  }

  /**
   * Sets the value of the 'scientificName' field.
   * @param value the value to set.
   */
  public void setScientificName(java.lang.CharSequence value) {
    this.scientificName = value;
  }

  /** Creates a new VerbatimOccurrence RecordBuilder */
  public static org.gbif.data.io.avro.VerbatimOccurrence.Builder newBuilder() {
    return new org.gbif.data.io.avro.VerbatimOccurrence.Builder();
  }
  
  /** Creates a new VerbatimOccurrence RecordBuilder by copying an existing Builder */
  public static org.gbif.data.io.avro.VerbatimOccurrence.Builder newBuilder(org.gbif.data.io.avro.VerbatimOccurrence.Builder other) {
    return new org.gbif.data.io.avro.VerbatimOccurrence.Builder(other);
  }
  
  /** Creates a new VerbatimOccurrence RecordBuilder by copying an existing VerbatimOccurrence instance */
  public static org.gbif.data.io.avro.VerbatimOccurrence.Builder newBuilder(org.gbif.data.io.avro.VerbatimOccurrence other) {
    return new org.gbif.data.io.avro.VerbatimOccurrence.Builder(other);
  }
  
  /**
   * RecordBuilder for VerbatimOccurrence instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VerbatimOccurrence>
    implements org.apache.avro.data.RecordBuilder<VerbatimOccurrence> {

    private java.lang.CharSequence occurrenceId;
    private java.lang.CharSequence scientificName;

    /** Creates a new Builder */
    private Builder() {
      super(org.gbif.data.io.avro.VerbatimOccurrence.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gbif.data.io.avro.VerbatimOccurrence.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.occurrenceId)) {
        this.occurrenceId = data().deepCopy(fields()[0].schema(), other.occurrenceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.scientificName)) {
        this.scientificName = data().deepCopy(fields()[1].schema(), other.scientificName);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing VerbatimOccurrence instance */
    private Builder(org.gbif.data.io.avro.VerbatimOccurrence other) {
            super(org.gbif.data.io.avro.VerbatimOccurrence.SCHEMA$);
      if (isValidValue(fields()[0], other.occurrenceId)) {
        this.occurrenceId = data().deepCopy(fields()[0].schema(), other.occurrenceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.scientificName)) {
        this.scientificName = data().deepCopy(fields()[1].schema(), other.scientificName);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'occurrenceId' field */
    public java.lang.CharSequence getOccurrenceId() {
      return occurrenceId;
    }
    
    /** Sets the value of the 'occurrenceId' field */
    public org.gbif.data.io.avro.VerbatimOccurrence.Builder setOccurrenceId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.occurrenceId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'occurrenceId' field has been set */
    public boolean hasOccurrenceId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'occurrenceId' field */
    public org.gbif.data.io.avro.VerbatimOccurrence.Builder clearOccurrenceId() {
      occurrenceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'scientificName' field */
    public java.lang.CharSequence getScientificName() {
      return scientificName;
    }
    
    /** Sets the value of the 'scientificName' field */
    public org.gbif.data.io.avro.VerbatimOccurrence.Builder setScientificName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.scientificName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'scientificName' field has been set */
    public boolean hasScientificName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'scientificName' field */
    public org.gbif.data.io.avro.VerbatimOccurrence.Builder clearScientificName() {
      scientificName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public VerbatimOccurrence build() {
      try {
        VerbatimOccurrence record = new VerbatimOccurrence();
        record.occurrenceId = fieldSetFlags()[0] ? this.occurrenceId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.scientificName = fieldSetFlags()[1] ? this.scientificName : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
