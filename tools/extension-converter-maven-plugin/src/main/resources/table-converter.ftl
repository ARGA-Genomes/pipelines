package ${packagePath};

import java.util.Optional;
import java.util.function.Function;

import org.gbif.api.vocabulary.Extension;
import org.gbif.dwc.terms.DwcTerm;
import org.gbif.pipelines.core.interpreters.ExtensionInterpretation;
import org.gbif.pipelines.core.interpreters.ExtensionInterpretation.TargetHandler;
import ${namespace}.BasicRecord;
import ${namespace}.ExtendedRecord;
import ${namespace}.${tableName};

import lombok.AccessLevel;
import lombok.NoArgsConstructor;

/**
 * Autogenerated by extension-converter-maven-plugin. DO NOT EDIT DIRECTLY
 *
 * Converts/maps form {@link ExtendedRecord} to {@link ${tableName}}.
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class ${tableName}Converter {

  private static final Function<${tableName}, TargetHandler<${tableName}>>
      VERBATIM_HANDLER =
          mft ->
              ExtensionInterpretation.extension("${rowType}")
                  .to(() -> mft)
                  // Verbatim
              <#list setters as setter>
                  .map("${setter.qualifier}", ${tableName}::setV${setter.name})
              </#list>;

  private static final Function<${tableName}, TargetHandler<${tableName}>>
      INTERPRETED_HANDLER =
          mft ->
              ExtensionInterpretation.extension("${rowType}")
                  .to(() -> mft)
                  // Interpreted
              <#list setters as setter>
                  .map("${setter.qualifier}", ${tableName}::set${setter.name})
              </#list>;

  /**
   * Converts an extension of a {@link ExtendedRecord} and populates a {@link
   * ${tableName}} with verbatim and interpreted values.
   */
  public static Optional<${tableName}> convert(BasicRecord br, ExtendedRecord er) {
    if (er == null || br == null) {
      return Optional.empty();
    }
    ${tableName} table =
        ${tableName}.newBuilder().setGbifid(br.getGbifId()).build();

    return VERBATIM_HANDLER
        .apply(table)
        .convert(er)
        .get()
        .flatMap(x -> INTERPRETED_HANDLER.apply(x).convert(er).get());
  }
}
